# Module System Example - Sona v0.5.1
# This example demonstrates the fs and http modules working together

import fs.smod
import http.smod

print("SONA NATIVE MODULE SYSTEM DEMONSTRATION")
print("======================================")
print("This example shows how to use the fs and http modules")

print("\n[FILE SYSTEM OPERATIONS]")
print("------------------------")

# Create a text file
let filename = "web_content.txt"
fs.write_file(filename, "This file will store web content")
print("Created file: " + filename)

# Verify file exists
let file_exists = fs.exists(filename) 
print("File exists check: " + file_exists)

# Read file content
let content = fs.read_file(filename)
print("Initial content: " + content)

print("\n[HTTP OPERATIONS]")
print("----------------")
print("Note: HTTP examples are commented out by default to avoid making actual network requests")

# Uncomment to make real HTTP requests
# let url = "https://httpbin.org/get"
# print("Fetching content from: " + url)
# let response = http.get(url)
# print("Received HTTP response")

# Save response to file (simulated)
let simulated_response = """{
  "args": {},
  "headers": {
    "Accept": "*/*",
    "Host": "httpbin.org",
    "User-Agent": "Sona/0.5.1",
    "X-Amzn-Trace-Id": "Root=1-62f56318-2f835f732b158cc06834767a"
  },
  "origin": "127.0.0.1",
  "url": "https://httpbin.org/get"
}"""

# Write the simulated response to file
fs.write_file(filename, simulated_response)
print("Saved HTTP response to file")

# Read updated file content
content = fs.read_file(filename)
print("\n[FILE CONTENT]")
print("-------------")
print(content)

print("\n[DIRECTORY OPERATIONS]")
print("--------------------")

# Create a directory
let dirname = "sona_module_test"
fs.makedirs(dirname)
print("Created directory: " + dirname)

# List current directory
let files = fs.listdir(".")
print("\nFiles in current directory:")
let i = 0

# Note: Sona v0.5.1 doesn't have an 'and' operator, so we use nested if statements
while i < 10 {
    if i < len(files) {
        print("- " + files[i])
    }
    i = i + 1
}
if len(files) > 10 {
    print("... and " + (len(files) - 10) + " more files")
}

print("\nNative function integration test completed successfully!")
