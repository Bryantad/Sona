import io from "stdlib/io"
import json from "stdlib/json"
import fs from "stdlib/fs"
import time from "stdlib/time"
import fmt from "stdlib/fmt"

let DATA_FILE = "expenses.json"

fn main() {
    io.println("Expense Tracker")
    io.println("==============")
    
    # Load existing expenses or create new array
    let expenses = load_expenses()
    
    while true {
        io.println("\nOptions:")
        io.println("1. Add Expense")
        io.println("2. View All Expenses")
        io.println("3. View Monthly Summary")
        io.println("4. View Expenses by Category")
        io.println("5. Delete Expense")
        io.println("6. Exit")
        
        io.print("\nSelect option (1-6): ")
        let choice = io.readline()
        
        if choice == "6" {
            break
        }
        
        if choice == "1" {
            add_expense(expenses)
        } elif choice == "2" {
            view_expenses(expenses)
        } elif choice == "3" {
            view_monthly_summary(expenses)
        } elif choice == "4" {
            view_by_category(expenses)
        } elif choice == "5" {
            delete_expense(expenses)
        } else {
            io.println("Invalid choice. Please select 1-6.")
        }
    }
}

fn load_expenses() {
    if fs.file_exists(DATA_FILE) {
        try {
            let data = fs.read_file(DATA_FILE)
            return json.parse(data)
        } catch {
            io.println("Error loading expense data. Starting with empty list.")
            return []
        }
    } else {
        return []
    }
}

fn save_expenses(expenses) {
    try {
        let data = json.stringify(expenses)
        fs.write_file(DATA_FILE, data)
    } catch {
        io.println("Error saving expense data.")
    }
}

fn add_expense(expenses) {
    io.print("\nDescription: ")
    let description = io.readline()
    
    io.print("Amount: $")
    let amount = io.readline().to_num()
    
    io.print("Category: ")
    let category = io.readline()
    
    io.print("Date (YYYY-MM-DD, leave empty for today): ")
    let date = io.readline()
    if date == "" {
        date = time.format_date(time.now())
    }
    
    let expense = {
        "id": time.now(),  # Use timestamp as unique ID
        "description": description,
        "amount": amount,
        "category": category,
        "date": date
    }
    
    expenses.append(expense)
    save_expenses(expenses)
    
    io.println("\nExpense added successfully!")
}

fn view_expenses(expenses) {
    if expenses.length() == 0 {
        io.println("\nNo expenses recorded yet.")
        return
    }
    
    io.println("\nAll Expenses:")
    io.println("=============")
    
    let total = 0
    for expense in expenses {
        io.println(f"[{expense['date']}] {expense['description']} (${fmt.format_float(expense['amount'], 2)}) - {expense['category']}")
        total += expense["amount"]
    }
    
    io.println("-------------")
    io.println(f"Total: ${fmt.format_float(total, 2)}")
}

fn view_monthly_summary(expenses) {
    if expenses.length() == 0 {
        io.println("\nNo expenses recorded yet.")
        return
    }
    
    # Group by month
    let monthly = {}
    for expense in expenses {
        let month = expense["date"].substring(0, 7)  # YYYY-MM
        if not (month in monthly) {
            monthly[month] = []
        }
        monthly[month].append(expense)
    }
    
    # Display summary
    io.println("\nMonthly Summary:")
    io.println("===============")
    
    for month in monthly.keys() {
        let month_expenses = monthly[month]
        let total = 0
        for expense in month_expenses {
            total += expense["amount"]
        }
        io.println(f"{month}: ${fmt.format_float(total, 2)} ({month_expenses.length()} expenses)")
    }
}

fn view_by_category(expenses) {
    if expenses.length() == 0 {
        io.println("\nNo expenses recorded yet.")
        return
    }
    
    # Group by category
    let categories = {}
    for expense in expenses {
        let category = expense["category"]
        if not (category in categories) {
            categories[category] = []
        }
        categories[category].append(expense)
    }
    
    # Display by category
    io.println("\nExpenses by Category:")
    io.println("====================")
    
    for category in categories.keys() {
        let cat_expenses = categories[category]
        let total = 0
        for expense in cat_expenses {
            total += expense["amount"]
        }
        io.println(f"\n{category}: ${fmt.format_float(total, 2)}")
        io.println("-" * (category.length() + 2 + fmt.format_float(total, 2).length()))
        
        for expense in cat_expenses {
            io.println(f"[{expense['date']}] {expense['description']} (${fmt.format_float(expense['amount'], 2)})")
        }
    }
}

fn delete_expense(expenses) {
    if expenses.length() == 0 {
        io.println("\nNo expenses to delete.")
        return
    }
    
    io.println("\nSelect expense to delete:")
    for i in range(expenses.length()) {
        let expense = expenses[i]
        io.println(f"{i+1}. [{expense['date']}] {expense['description']} (${fmt.format_float(expense['amount'], 2)})")
    }
    
    io.print("\nEnter number (or 0 to cancel): ")
    let choice = io.readline().to_num()
    
    if choice == 0 {
        return
    }
    
    if choice > 0 and choice <= expenses.length() {
        let removed = expenses.pop(choice - 1)
        save_expenses(expenses)
        io.println(f"\nDeleted: {removed['description']} (${fmt.format_float(removed['amount'], 2)})")
    } else {
        io.println("\nInvalid selection.")
    }
}
