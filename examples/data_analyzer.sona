// Data Analyzer for Sona language
// This demo showcases data processing, statistics, and text-visualization
import native_stdin
import utils.math.smod as math
import utils.array.smod as array
import utils.string.smod as string
import native_file

// Data storage
let data_points = []
let data_labels = []
let running = 1

// Helper function: check if a number is negative
func is_negative(num) {
    let num_str = math.to_str(num)
    let first_char = string.substr(num_str, 0, 1)
    return math.eq(first_char, "-")
}

// Helper function: check if a < b
func is_less_than(a, b) {
    let diff = math.subtract(a, b)
    return is_negative(diff)
}

// Helper function: check if a > b
func is_greater_than(a, b) {
    return is_less_than(b, a)
}

// Helper function to convert string to number
func parse_number(str) {
    // Remove spaces
    let cleaned = string.trim(str)
    
    // Check if it's empty
    if math.eq(string.length(cleaned), 0) {
        return 0
    }
    
    // Convert to number
    return math.to_number(cleaned)
}

// Calculate the sum of an array
func sum(arr) {
    let total = 0
    let i = 0
    let len = array.length(arr)
    
    while is_less_than(i, len) {
        let value = array.get(arr, i)
        let total = total + value
        let i = i + 1
    }
    
    return total
}

// Calculate the average of an array
func average(arr) {
    let len = array.length(arr)
    
    if math.eq(len, 0) {
        return 0
    }
    
    let total = sum(arr)
    return total / len
}

// Find the minimum value in an array
func min_value(arr) {
    let len = array.length(arr)
    
    if math.eq(len, 0) {
        return 0
    }
    
    let min_val = array.get(arr, 0)
    let i = 1
    
    while is_less_than(i, len) {
        let current = array.get(arr, i)
        if is_less_than(current, min_val) {
            let min_val = current
        }
        let i = i + 1
    }
    
    return min_val
}

// Find the maximum value in an array
func max_value(arr) {
    let len = array.length(arr)
    
    if math.eq(len, 0) {
        return 0
    }
    
    let max_val = array.get(arr, 0)
    let i = 1
    
    while is_less_than(i, len) {
        let current = array.get(arr, i)
        if is_greater_than(current, max_val) {
            let max_val = current
        }
        let i = i + 1
    }
    
    return max_val
}

// Calculate the standard deviation
func std_deviation(arr) {
    let len = array.length(arr)
    
    if math.eq(len, 0) {
        return 0
    }
    
    let avg = average(arr)
    let sum_squared_diff = 0
    let i = 0
    
    while is_less_than(i, len) {
        let value = array.get(arr, i)
        let diff = value - avg
        let squared = diff * diff
        let sum_squared_diff = sum_squared_diff + squared
        let i = i + 1
    }
    
    let variance = sum_squared_diff / len
    return math.sqrt(variance)
}

// Create a text-based histogram
func text_histogram(arr, bins) {
    let min = min_value(arr)
    let max = max_value(arr)
    
    if math.eq(min, max) {
        print("Cannot create histogram: all values are the same")
        return 0
    }
    
    let range = max - min
    let bin_size = range / bins
    let histogram = []
    let i = 0
    
    // Initialize histogram bins with zeros
    while is_less_than(i, bins) {
        array.push(histogram, 0)
        let i = i + 1
    }
    
    // Count values into bins
    let j = 0
    let len = array.length(arr)
    
    while is_less_than(j, len) {
        let value = array.get(arr, j)
        let bin_index = math.floor((value - min) / bin_size)
        
        // Edge case: max value goes into the last bin
        if math.eq(value, max) {
            let bin_index = bins - 1
        }
        
        // Increment the bin count
        let current_count = array.get(histogram, bin_index)
        array.set(histogram, bin_index, current_count + 1)
        let j = j + 1
    }
    
    // Find the maximum bin height for scaling
    let max_count = max_value(histogram)
    
    // Print histogram
    print("\nHistogram:")
    print("----------")
    let k = 0
    
    while is_less_than(k, bins) {
        let count = array.get(histogram, k)
        let bin_start = min + (k * bin_size)
        let bin_end = bin_start + bin_size
        let label = math.round_to(bin_start, 2) + " - " + math.round_to(bin_end, 2) + " | "
        
        // Scale the bar to max 20 chars
        let bar_length = 0
        if is_greater_than(max_count, 0) {
            let bar_length = math.round((count * 20) / max_count)
        }
        
        // Create the bar
        let bar = ""
        let b = 0
        
        while is_less_than(b, bar_length) {
            let bar = bar + "â–ˆ"
            let b = b + 1
        }
        
        // Print the histogram line
        print(label + bar + " " + math.to_str(count))
        let k = k + 1
    }
    
    return 0
}

// Calculate statistics and display results
func analyze_data() {
    let len = array.length(data_points)
    
    if math.eq(len, 0) {
        print("No data to analyze. Please add data first.")
        return 0
    }
    
    print("\n--- Data Analysis Results ---")
    print("Count: " + math.to_str(len))
    print("Sum: " + math.to_str(sum(data_points)))
    print("Average: " + math.to_str(average(data_points)))
    print("Minimum: " + math.to_str(min_value(data_points)))
    print("Maximum: " + math.to_str(max_value(data_points)))
    print("Standard Deviation: " + math.to_str(std_deviation(data_points)))
    
    // Create histogram with 5 bins
    text_histogram(data_points, 5)
    
    return 0
}

// Add a single data point
func add_data_point() {
    print("\nEnter a numeric value:")
    let input = native_stdin.readline()
    let value = parse_number(input)
    
    print("Enter a label for this data point (optional):")
    let label = native_stdin.readline()
    
    array.push(data_points, value)
    array.push(data_labels, label)
    
    print("Data point added: " + math.to_str(value))
    return 0
}

// Add multiple data points at once
func add_multiple_data_points() {
    print("\nEnter multiple values separated by spaces:")
    let input = native_stdin.readline()
    let parts = string.split(input, " ")
    let count = 0
    let i = 0
    let len = array.length(parts)
    
    while is_less_than(i, len) {
        let part = array.get(parts, i)
        if math.not_eq(string.length(part), 0) {
            let value = parse_number(part)
            array.push(data_points, value)
            array.push(data_labels, "")
            let count = count + 1
        }
        let i = i + 1
    }
    
    print(math.to_str(count) + " data points added")
    return 0
}

// Display all data points
func display_data() {
    let len = array.length(data_points)
    
    if math.eq(len, 0) {
        print("No data points to display")
        return 0
    }
    
    print("\nCurrent data points:")
    print("--------------------")
    let i = 0
    
    while is_less_than(i, len) {
        let value = array.get(data_points, i)
        let label = array.get(data_labels, i)
        let display = math.to_str(i + 1) + ". " + math.to_str(value) 
        
        if math.not_eq(string.length(label), 0) {
            let display = display + " (" + label + ")"
        }
        
        print(display)
        let i = i + 1
    }
    
    return 0
}

// Clear all data
func clear_data() {
    let data_points = []
    let data_labels = []
    print("All data has been cleared")
    return 0
}

// Import data from a file (each line should have one number)
func import_from_file() {
    print("\nEnter the path to the file:")
    let file_path = native_stdin.readline()
    
    // Try to read the file
    if math.eq(native_file.exists(file_path), 0) {
        print("File not found: " + file_path)
        return 0
    }
    
    let content = native_file.read(file_path)
    let lines = string.split(content, "\n")
    let count = 0
    let i = 0
    let len = array.length(lines)
    
    while is_less_than(i, len) {
        let line = array.get(lines, i)
        let trimmed = string.trim(line)
        
        if math.not_eq(string.length(trimmed), 0) {
            let value = parse_number(trimmed)
            array.push(data_points, value)
            array.push(data_labels, "")
            let count = count + 1
        }
        
        let i = i + 1
    }
    
    print(math.to_str(count) + " data points imported from " + file_path)
    return 0
}

// Display the main menu
func show_menu() {
    print("\n=== Data Analyzer Menu ===")
    print("1. Add a single data point")
    print("2. Add multiple data points")
    print("3. Import data from file")
    print("4. Display all data")
    print("5. Analyze data and show statistics")
    print("6. Clear all data")
    print("7. Exit")
    print("Enter your choice (1-7):")
    
    let choice = native_stdin.readline()
    
    if math.eq(choice, "1") {
        add_data_point()
    } else if math.eq(choice, "2") {
        add_multiple_data_points()
    } else if math.eq(choice, "3") {
        import_from_file()
    } else if math.eq(choice, "4") {
        display_data()
    } else if math.eq(choice, "5") {
        analyze_data()
    } else if math.eq(choice, "6") {
        clear_data()
    } else if math.eq(choice, "7") {
        let running = 0
        print("Thank you for using Data Analyzer!")
    } else {
        print("Invalid choice. Please try again.")
    }
    
    return 0
}

// Add some sample data for testing
func add_sample_data() {
    array.push(data_points, 10)
    array.push(data_labels, "Sample 1")
    
    array.push(data_points, 15)
    array.push(data_labels, "Sample 2")
    
    array.push(data_points, 7)
    array.push(data_labels, "Sample 3")
    
    array.push(data_points, 12)
    array.push(data_labels, "Sample 4")
    
    array.push(data_points, 20)
    array.push(data_labels, "Sample 5")
    
    print("Added 5 sample data points for demonstration")
    return 0
}

// Main program
print("Welcome to Data Analyzer!")
print("This demo allows you to process numeric data and calculate statistics.")
print("\nTIP: Use the menu to add your own data, or continue for sample data.")

// Ask if user wants to use sample data or start empty
print("\nWould you like to start with sample data? (y/n)")
let response = native_stdin.readline()

if math.eq(string.lower(response), "y") {
    add_sample_data()
}

// Main loop
while math.eq(running, 1) {
    show_menu()
}
