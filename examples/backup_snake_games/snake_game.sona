import native_stdin
import utils.math.smod as math
import utils.array.smod as array
import utils.string.smod as string

// Constants for the game
let BOARD_WIDTH = 15
let BOARD_HEIGHT = 10
let EMPTY = " "
let SNAKE_BODY = "O"
let SNAKE_HEAD = "@"
let FOOD = "*"

// Global variables
let snake = [[5, 5]]
let food = [7, 7]
let direction = "right"
let running = true
let score = 0
let grow = false  // Flag to determine if snake should grow

// Comparison functions based on math.subtract

func is_less_than(a, b) {
    let diff = math.subtract(a, b)
    return diff < 0
}

func is_greater_than(a, b) {
    let diff = math.subtract(a, b)
    return diff > 0
}

func is_less_than_eq(a, b) {
    let diff = math.subtract(a, b)
    return diff <= 0
}

func is_greater_than_eq(a, b) {
    let diff = math.subtract(a, b)
    return diff >= 0
}

// Generate a new random food position
func generate_food() {
    let x = math.floor(math.rand() * BOARD_WIDTH)
    let y = math.floor(math.rand() * BOARD_HEIGHT)
    // Simple validation to ensure food doesn't appear on snake
    let valid = true
    let i = 0
    
    let snake_length = array.length(snake)
    while i <= snake_length - 1 {
        let segment = array.get(snake, i)
        if math.eq(array.get(segment, 0), x) && math.eq(array.get(segment, 1), y) {
            valid = false
        }
        let i = i + 1
    }
    
    if valid {
        food[0] = x
        food[1] = y
    } else {
        generate_food()  // Try again if position is invalid
    }
}

// Check if snake head has collided with food
func check_food_collision() {
    let head = array.get(snake, 0)
    let head_x = array.get(head, 0)
    let head_y = array.get(head, 1)
    
    if math.eq(head_x, food[0]) && math.eq(head_y, food[1]) {
        score = score + 10
        grow = true
        generate_food()
    }
}

// Check if snake has collided with itself
func check_self_collision() {
    let head = array.get(snake, 0)
    let head_x = array.get(head, 0)
    let head_y = array.get(head, 1)
    
    let i = 1
    let snake_length = array.length(snake)
    while i <= snake_length - 1 {
        let segment = array.get(snake, i)
        if math.eq(head_x, array.get(segment, 0)) && math.eq(head_y, array.get(segment, 1)) {
            running = false
            print("\nGame Over! Snake collided with itself.")
            print("Final Score: " + math.to_str(score))
        }
        let i = i + 1
    }
}

// Check if snake is out of bounds
func check_boundary() {
    let head = array.get(snake, 0)
    let x = array.get(head, 0)
    let y = array.get(head, 1)
    
    let out_of_bounds = false
    
    // Check x boundaries
    if is_less_than(x, 0) {
        out_of_bounds = true
    }
    if is_greater_than_eq(x, BOARD_WIDTH) {
        out_of_bounds = true
    }
    
    // Check y boundaries
    if is_less_than(y, 0) {
        out_of_bounds = true
    }
    if is_greater_than_eq(y, BOARD_HEIGHT) {
        out_of_bounds = true
    }
    
    if out_of_bounds {
        running = false
        print("\nGame Over! Snake hit the boundary.")
        print("Final Score: " + math.to_str(score))
    }
}

// Move the snake in the specified direction
func move_snake(dir) {
    let head = array.get(snake, 0)
    let x = array.get(head, 0)
    let y = array.get(head, 1)

    // Calculate new head position
    let new_x = x
    let new_y = y
    
    if math.eq(dir, "up") {
        let new_y = y - 1
    } else if math.eq(dir, "down") {
        let new_y = y + 1
    } else if math.eq(dir, "left") {
        let new_x = x - 1
    } else {
        let new_x = x + 1
    }
    
    let new_head = [new_x, new_y]

    // Insert new head at the beginning (need to implement array insertion at specific index)
    let new_snake = [new_head]
    let i = 0
    let snake_length = array.length(snake)
    
    // Add the rest of the body
    while i < snake_length {
        array.push(new_snake, array.get(snake, i))
        let i = i + 1
    }
    
    // Set snake to the new array
    snake = new_snake
    
    // Remove tail only if snake shouldn't grow
    if grow {
        grow = false
    } else {
        // Remove last element (the added original head and the tail)
        let final_length = array.length(snake)
        let snake = array.slice(snake, 0, final_length - 1)
    }
}

// Draw the game board with snake and food
func draw_board() {
    // Clear the console with some new lines
    print("\n\n\n\n\n\n\n\n\n\n")
    
    // Print top border
    let border = ""
    let i = 0
    while i <= BOARD_WIDTH + 1 {
        let border = border + "-"
        let i = i + 1
    }
    print(border)
    
    // Draw each row of the board
    let y = 0
    while is_less_than(y, BOARD_HEIGHT) {
        let row = "|"
        let x = 0
        while is_less_than(x, BOARD_WIDTH) {
            // Default cell content is empty
            let cell = EMPTY
            
            // Check if cell contains snake segment
            let s = 0
            let snake_length = array.length(snake)
            while is_less_than(s, snake_length) {
                let segment = array.get(snake, s)
                if math.eq(array.get(segment, 0), x) && math.eq(array.get(segment, 1), y) {
                    if math.eq(s, 0) {
                        let cell = SNAKE_HEAD
                    } else {
                        let cell = SNAKE_BODY
                    }
                }
                let s = s + 1
            }
            
            // Check if cell contains food
            if math.eq(x, food[0]) && math.eq(y, food[1]) {
                let cell = FOOD
            }
            
            let row = row + cell
            let x = x + 1
        }
        let row = row + "|"
        print(row)
        let y = y + 1
    }
    
    // Print bottom border
    print(border)
    
    // Print game info
    print("Score: " + math.to_str(score) + " | Snake Length: " + math.to_str(array.length(snake)))
    print("Controls: up, down, left, right, exit")
}

// Initialize food at start of game
generate_food()

// Function to check if input is a valid direction
func is_valid_direction(dir) {
    if math.eq(dir, "up") {
        return true
    } else if math.eq(dir, "down") {
        return true
    } else if math.eq(dir, "left") {
        return true
    } else if math.eq(dir, "right") {
        return true
    } else {
        return false
    }
}

// Main game loop
while running {
    draw_board()
    let input = native_stdin.input("Move: ")
    
    // Handle input
    if math.eq(input, "exit") {
        running = false
    } else if is_valid_direction(input) {
        direction = input
        move_snake(direction)
        check_food_collision()
        check_boundary()
        check_self_collision()
    } else {
        print("Invalid input! Use up, down, left, right, or exit.")
    }
}