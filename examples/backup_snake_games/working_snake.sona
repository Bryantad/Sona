// Simple snake game that works with Sona's limitations

import native_stdin
import utils.math.smod as math
import utils.array.smod as array
import utils.string.smod as string

// Constants
let WIDTH = 10
let HEIGHT = 10
let EMPTY = "."
let SNAKE = "O"
let HEAD = "@"
let FOOD = "*"
let WALL = "#"

// Initial state
let snake_x = [5]  // Snake X coordinates
let snake_y = [5]  // Snake Y coordinates
let food_x = 7
let food_y = 7
let direction = "right"
let running = true
let score = 0
let grow = false

// Helper string-based comparison functions
func is_negative(num) {
    // Check if a number is negative by looking at its string representation
    let num_str = math.to_str(num)
    let first_char = string.substr(num_str, 0, 1)
    return math.eq(first_char, "-")
}

func is_less_than(a, b) {
    // a < b means a - b is negative
    let diff = math.subtract(a, b)
    return is_negative(diff)
}

// Place food at a random position
func place_food() {
    let new_x = math.floor(math.rand() * WIDTH)
    let new_y = math.floor(math.rand() * HEIGHT)
    
    // Check for collision with snake
    let i = 0
    let len = array.length(snake_x)
    let has_collision = false
    
    while is_less_than(i, len) {
        let sx = array.get(snake_x, i)
        let sy = array.get(snake_y, i)
        
        if math.eq(sx, new_x) {
            if math.eq(sy, new_y) {
                let has_collision = true
            }
        }
        
        let i = i + 1
    }
    
    if has_collision {
        // Try again if there's a collision
        place_food()
    } else {
        // Update food coordinates
        let food_x = new_x
        let food_y = new_y
    }
}

// Draw the game board
func draw_board() {
    // Clear screen with newlines
    print("\n\n\n\n\n\n\n\n\n")
    
    // Top border
    let border = ""
    let i = 0
    while is_less_than(i, WIDTH + 2) {
        let border = border + WALL
        let i = i + 1
    }
    print(border)
    
    // Draw grid
    let y = 0
    while is_less_than(y, HEIGHT) {
        let row = WALL  // Left border
        
        let x = 0
        while is_less_than(x, WIDTH) {
            let cell = EMPTY
            
            // Check for snake
            let s = 0
            let len = array.length(snake_x)
            while is_less_than(s, len) {
                let sx = array.get(snake_x, s)
                let sy = array.get(snake_y, s)
                
                if math.eq(x, sx) {
                    if math.eq(y, sy) {
                        if math.eq(s, 0) {
                            let cell = HEAD  // Head
                        } else {
                            let cell = SNAKE  // Body
                        }
                    }
                }
                
                let s = s + 1
            }
            
            // Check for food
            if math.eq(x, food_x) {
                if math.eq(y, food_y) {
                    let cell = FOOD
                }
            }
            
            let row = row + cell
            let x = x + 1
        }
        
        let row = row + WALL  // Right border
        print(row)
        let y = y + 1
    }
    
    // Bottom border
    print(border)
    
    // Game info
    print("Score: " + math.to_str(score) + " | Length: " + math.to_str(array.length(snake_x)))
    print("Controls: up, down, left, right, exit")
}

// Move the snake in the current direction
func move_snake() {
    // Get current head position
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Calculate new head position based on direction
    let new_x = head_x
    let new_y = head_y
    
    if math.eq(direction, "up") {
        let new_y = head_y - 1
    }
    if math.eq(direction, "down") {
        let new_y = head_y + 1
    }
    if math.eq(direction, "left") {
        let new_x = head_x - 1
    }
    if math.eq(direction, "right") {
        let new_x = head_x + 1
    }
    
    // Create new arrays with the new head position
    let new_snake_x = [new_x]
    let new_snake_y = [new_y]
    
    // Add the rest of the body
    let i = 0
    let len = array.length(snake_x)
    while is_less_than(i, len) {
        array.push(new_snake_x, array.get(snake_x, i))
        array.push(new_snake_y, array.get(snake_y, i))
        let i = i + 1
    }
    
    // Replace snake arrays with new arrays
    let snake_x = new_snake_x
    let snake_y = new_snake_y
    
    // Remove the last segment unless growing
    if grow {
        let grow = false
    } else {
        array.pop(snake_x)
        array.pop(snake_y)
    }
}

// Check if snake has eaten food
func check_food() {
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    if math.eq(head_x, food_x) {
        if math.eq(head_y, food_y) {
            let score = score + 10
            let grow = true
            place_food()
        }
    }
}

// Check for game over conditions
func check_game_over() {
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Wall collisions
    if is_negative(head_x) {
        let running = false
        print("Game Over! Hit the left wall.")
        return
    }
    if is_negative(head_y) {
        let running = false
        print("Game Over! Hit the top wall.")
        return
    }
    if math.eq(head_x, WIDTH) {
        let running = false
        print("Game Over! Hit the right wall.")
        return
    }
    if math.eq(head_y, HEIGHT) {
        let running = false
        print("Game Over! Hit the bottom wall.")
        return
    }
    let diff_x = math.subtract(head_x, WIDTH)
    if is_negative(diff_x) {
        // Still within bounds, do nothing
    } else {
        let running = false
        print("Game Over! Hit the right wall.")
        return
    }
    let diff_y = math.subtract(head_y, HEIGHT)
    if is_negative(diff_y) {
        // Still within bounds, do nothing
    } else {
        let running = false
        print("Game Over! Hit the bottom wall.")
        return
    }
    
    // Self collision
    let i = 1  // Start at 1 to skip the head
    let len = array.length(snake_x)
    while is_less_than(i, len) {
        let body_x = array.get(snake_x, i)
        let body_y = array.get(snake_y, i)
        
        if math.eq(head_x, body_x) {
            if math.eq(head_y, body_y) {
                let running = false
                print("Game Over! Snake ate itself.")
                print("Final score: " + math.to_str(score))
                return
            }
        }
        
        let i = i + 1
    }
}

// Check if input is a valid direction
func is_valid_direction(input) {
    if math.eq(input, "up") {
        return true
    }
    if math.eq(input, "down") {
        return true
    }
    if math.eq(input, "left") {
        return true
    }
    if math.eq(input, "right") {
        return true
    }
    return false
}

// Initialize food
place_food()

// Main game loop
while running {
    draw_board()
    let input = native_stdin.input("Move: ")
    
    if math.eq(input, "exit") {
        let running = false
    } else if is_valid_direction(input) {
        let direction = input
        move_snake()
        check_food()
        check_game_over()
    }
}

print("Thanks for playing!")
