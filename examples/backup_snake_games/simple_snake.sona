// A simplified version of the snake game that works with Sona's capabilities

import native_stdin
import utils.math.smod as math
import utils.array.smod as array
import utils.string.smod as string

// Constants
let WIDTH = 10
let HEIGHT = 10
let EMPTY = "."
let SNAKE = "O"
let HEAD = "@"
let FOOD = "*"

// Game state
let snake_x = [5]  // Snake body x coordinates
let snake_y = [5]  // Snake body y coordinates
let food_x = 7
let food_y = 7
let direction = "right"
let running = true
let score = 0
let grow = false

// Helper comparison functions for Sona language
func is_less_than(a, b) {
    let diff = math.subtract(a, b)
    if diff < 0 {
        return true
    }
    return false
}

func is_greater_than(a, b) {
    let diff = math.subtract(b, a)
    if diff < 0 {
        return true
    }
    return false
}

func is_greater_than_eq(a, b) {
    let diff = math.subtract(b, a)
    if diff <= 0 {
        return true
    }
    return false
}

// Calculate new random food position
func spawn_food() {
    let x = math.floor(math.rand() * WIDTH)
    let y = math.floor(math.rand() * HEIGHT)
    
    // Check it doesn't overlap with snake
    let valid = true
    let i = 0
    let snake_length = array.length(snake_x)
    
    func should_continue() {
        let diff = math.subtract(i, snake_length)
        return is_negative(diff)
    }
    
    while should_continue() {
        let match_x = math.eq(array.get(snake_x, i), x)
        let match_y = math.eq(array.get(snake_y, i), y)
        
        if match_x {
            if match_y {
                valid = false
            }
        }
        let i = i + 1
    }
    
    if valid {
        food_x = x
        food_y = y
    } else {
        spawn_food()  // Try again
    }
}

// Check if position has snake segment
func has_snake(x, y) {
    let i = 0
    let snake_length = array.length(snake_x)
    
    func loop_continue() {
        let diff = math.subtract(i, snake_length)
        return math.is_negative(diff)
    }
    
    while loop_continue() {
        let match_x = math.eq(array.get(snake_x, i), x)
        let match_y = math.eq(array.get(snake_y, i), y)
        
        if match_x {
            if match_y {
                return true
            }
        }
        let i = i + 1
    }
    return false
}

// Move snake in current direction
func move_snake() {
    // Current head position
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Calculate new head position
    let new_x = head_x
    let new_y = head_y
    
    if math.eq(direction, "up") {
        new_y = head_y - 1
    } else if math.eq(direction, "down") {
        new_y = head_y + 1
    } else if math.eq(direction, "left") {
        new_x = head_x - 1
    } else if math.eq(direction, "right") {
        new_x = head_x + 1
    }
    
    // Add new head (at beginning of arrays)
    let new_snake_x = [new_x]
    let new_snake_y = [new_y]
    
    // Add rest of body
    let i = 0
    let snake_length = array.length(snake_x)
    
    func loop_body() {
        let diff = math.subtract(i, snake_length)
        return math.is_negative(diff)
    }
    
    while loop_body() {
        array.push(new_snake_x, array.get(snake_x, i))
        array.push(new_snake_y, array.get(snake_y, i))
        let i = i + 1
    }
    
    // Replace arrays
    snake_x = new_snake_x
    snake_y = new_snake_y
    
    // Remove tail unless growing
    if grow {
        // Keep the tail if growing
        grow = false
    } else {
        // Remove last element (we added all segments plus the new head, so we need to remove one)
        array.pop(snake_x)
        array.pop(snake_y)
    }
}

// Check collisions with food
func check_food() {
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    let match_x = math.eq(head_x, food_x)
    let match_y = math.eq(head_y, food_y)
    
    if match_x {
        if match_y {
            score = score + 10
            grow = true
            spawn_food()
        }
    }
}

// Check if game is over (wall collision or self)
func check_game_over() {
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Wall collision
    let hit_wall = false
    
    // Check each wall separately
    if math.is_negative(head_x) {
        hit_wall = true
    }
    let diff_x = math.subtract(head_x, WIDTH)
    if math.eq(diff_x, 0) {
        hit_wall = true
    }
    if math.is_greater_than(diff_x, 0) {
        hit_wall = true
    }
    if math.is_negative(head_y) {
        hit_wall = true
    }
    let diff_y = math.subtract(head_y, HEIGHT)
    if math.eq(diff_y, 0) {
        hit_wall = true
    }
    if math.is_greater_than(diff_y, 0) {
        hit_wall = true
    }
    
    if hit_wall {
        running = false
        print("\nGame Over! Hit the wall.")
        print("Final score: " + math.to_str(score))
        return
    }
    
    // Self collision (skip head at index 0)
    let i = 1
    let snake_length = array.length(snake_x)
    
    func check_self() {
        let diff = math.subtract(i, snake_length)
        return math.is_negative(diff)
    }
    
    while check_self() {
        let match_x = math.eq(head_x, array.get(snake_x, i))
        let match_y = math.eq(head_y, array.get(snake_y, i))
        
        if match_x {
            if match_y {
                running = false
                print("\nGame Over! Snake ate itself.")
                print("Final score: " + math.to_str(score))
                return
            }
        }
        let i = i + 1
    }
}

// Draw the game board
func draw_board() {
    // Clear screen with newlines
    print("\n\n\n\n\n\n\n\n\n")
    
    // Draw top border
    let border = "+"
    let b = 0
    
    func draw_border() {
        let diff = math.subtract(b, WIDTH)
        return math.is_negative(diff)
    }
    
    while draw_border() {
        border = border + "-"
        let b = b + 1
    }
    border = border + "+"
    print(border)
    
    // Draw each row
    let y = 0
    
    func draw_rows() {
        let diff = math.subtract(y, HEIGHT)
        return math.is_negative(diff)
    }
    
    while draw_rows() {
        let row = "|"
        let x = 0
        
        func draw_cols() {
            let diff = math.subtract(x, WIDTH)
            return math.is_negative(diff)
        }
        
        while draw_cols() {
            // Check what to draw at this position
            let cell = EMPTY
            
            // Check for snake
            let s = 0
            let snake_length = array.length(snake_x)
            
            func check_snake() {
                let diff = math.subtract(s, snake_length)
                return math.is_negative(diff)
            }
            
            while check_snake() {
                let match_x = math.eq(array.get(snake_x, s), x)
                let match_y = math.eq(array.get(snake_y, s), y)
                
                if match_x {
                    if match_y {
                        if math.eq(s, 0) {
                            cell = HEAD
                        } else {
                            cell = SNAKE
                        }
                    }
                }
                let s = s + 1
            }
            
            // Check for food
            let food_match_x = math.eq(x, food_x)
            let food_match_y = math.eq(y, food_y)
            
            if food_match_x {
                if food_match_y {
                    cell = FOOD
                }
            }
            
            row = row + cell
            let x = x + 1
        }
        row = row + "|"
        print(row)
        let y = y + 1
    }
    
    // Bottom border
    print(border)
    
    // Game info
    print("Score: " + math.to_str(score) + " | Length: " + math.to_str(array.length(snake_x)))
    print("Controls: up, down, left, right, exit")
}

// Check if input is valid direction
func is_valid_direction(input) {
    if math.eq(input, "up") {
        return true
    }
    if math.eq(input, "down") {
        return true
    }
    if math.eq(input, "left") {
        return true
    }
    if math.eq(input, "right") {
        return true
    }
    return false
}

// Initialize food position
spawn_food()

// Main game loop
while running {
    draw_board()
    let input = native_stdin.input("Move: ")
    
    if math.eq(input, "exit") {
        running = false
    } else if is_valid_direction(input) {
        direction = input
        move_snake()
        check_food()
        check_game_over()
    }
}

print("Thanks for playing!")
