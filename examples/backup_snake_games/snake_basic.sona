// Simple snake game for Sona language

import utils.math.smod
import utils.array.smod
import utils.string.smod
import native_stdin

// Game constants
let WIDTH = 10
let HEIGHT = 8
let EMPTY = "."
let SNAKE = "O"
let HEAD = "@"
let FOOD = "*"
let WALL = "#"

// Initial snake position (single segment)
let snake_x = array.new()
let snake_y = array.new()
array.push(snake_x, 5)  // Head x position
array.push(snake_y, 4)  // Head y position

// Initial food position
let food_x = 7
let food_y = 4

// Game state
let score = 0
let direction = "right"
let game_over = false

// Helper function to check if a position has the snake
func has_snake(x, y) {
    let i = 0
    let len = array.length(snake_x)
    
    while i < len {
        if math.eq(array.get(snake_x, i), x) {
            if math.eq(array.get(snake_y, i), y) {
                return true
            }
        }
        let i = i + 1
    }
    return false
}

// Draw the game board
func draw_board() {
    // Clear screen with newlines
    print("\n\n\n\n\n\n\n\n")
    
    // Top border
    let border = ""
    let b = 0
    while b < WIDTH + 2 {
        border = border + WALL
        let b = b + 1
    }
    print(border)
    
    // Draw each row
    let y = 0
    while y < HEIGHT {
        let row = WALL  // Left wall
        
        let x = 0
        while x < WIDTH {
            let cell = EMPTY
            
            // Check for snake
            if has_snake(x, y) {
                if math.eq(x, array.get(snake_x, 0)) {
                    if math.eq(y, array.get(snake_y, 0)) {
                        cell = HEAD  // Snake head
                    }
                } else {
                    cell = SNAKE    // Snake body
                }
            }
            
            // Check for food
            if math.eq(x, food_x) {
                if math.eq(y, food_y) {
                    cell = FOOD
                }
            }
            
            row = row + cell
            let x = x + 1
        }
        
        row = row + WALL  // Right wall
        print(row)
        let y = y + 1
    }
    
    // Bottom border
    print(border)
    
    // Game info
    print("Score: " + math.to_str(score) + " | Length: " + math.to_str(array.length(snake_x)))
    print("Controls: w (up), s (down), a (left), d (right), q (quit)")
}

// Move the snake in current direction
func move_snake() {
    // Get current head position
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Calculate new head position
    let new_x = head_x
    let new_y = head_y
    
    if math.eq(direction, "up") {
        new_y = head_y - 1
    }
    if math.eq(direction, "down") {
        new_y = head_y + 1
    }
    if math.eq(direction, "left") {
        new_x = head_x - 1
    }
    if math.eq(direction, "right") {
        new_x = head_x + 1
    }
    
    // Check boundaries (wrap around)
    if new_x < 0 {
        new_x = WIDTH - 1
    }
    if new_x >= WIDTH {
        new_x = 0
    }
    if new_y < 0 {
        new_y = HEIGHT - 1
    }
    if new_y >= HEIGHT {
        new_y = 0
    }
    
    // Check for self-collision (game over)
    if has_snake(new_x, new_y) {
        game_over = true
        print("\nGame Over! Snake collided with itself.")
        return
    }
    
    // Add new head (insert at beginning)
    let new_snake_x = array.new()
    let new_snake_y = array.new()
    array.push(new_snake_x, new_x)
    array.push(new_snake_y, new_y)
    
    // Add rest of body
    let i = 0
    let len = array.length(snake_x)
    while i < len {
        array.push(new_snake_x, array.get(snake_x, i))
        array.push(new_snake_y, array.get(snake_y, i))
        let i = i + 1
    }
    
    // Replace old arrays
    snake_x = new_snake_x
    snake_y = new_snake_y
    
    // Check for food collision
    if math.eq(new_x, food_x) {
        if math.eq(new_y, food_y) {
            // Snake grows (don't remove tail)
            score = score + 10
            
            // Generate new food position
            food_x = math.floor(math.rand() * WIDTH)
            food_y = math.floor(math.rand() * HEIGHT)
        } else {
            // No food collected, remove tail
            let last = array.length(snake_x) - 1
            snake_x = array.slice(snake_x, 0, last)
            snake_y = array.slice(snake_y, 0, last)
        }
    } else {
        // No food collected, remove tail
        let last = array.length(snake_x) - 1
        snake_x = array.slice(snake_x, 0, last)
        snake_y = array.slice(snake_y, 0, last)
    }
}

// Main game loop
while !game_over {
    draw_board()
    let cmd = native_stdin.input("Move (wasd): ")
    
    if math.eq(cmd, "w") {
        direction = "up"
    }
    if math.eq(cmd, "a") {
        direction = "left"
    }
    if math.eq(cmd, "s") {
        direction = "down"
    }
    if math.eq(cmd, "d") {
        direction = "right"
    }
    if math.eq(cmd, "q") {
        game_over = true
    }
    
    if !game_over {
        move_snake()
    }
}

print("Thanks for playing!")
