// Description: Creates secure passwords with custom settings and strength evaluation
// Password Generator for Sona v0.5.1+
// A utility for generating secure passwords with various options.
// Features:
//   - Customizable length and complexity
//   - Include/exclude character sets (uppercase, lowercase, numbers, symbols)
//   - Generate multiple passwords at once
//   - Password strength indicator

import utils.random.smod as random
import utils.array.smod as array
import utils.string.smod as string
import utils.math.smod as math

// Character sets for password generation
const LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
const UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
const NUMBERS = "0123456789"
const SYMBOLS = "!@#$%^&*()-_=+[]{}|;:,.<>?/~"
const AMBIGUOUS = "Il1O0"  // Characters that can be confused visually

// Generate a single password with specified options
func generate_password(length, use_upper, use_lower, use_numbers, use_symbols, avoid_ambiguous) {
    if (length < 4) {
        print("Warning: Password length less than 4 is not recommended")
        if (length < 1) {
            print("Error: Password length must be at least 1")
            return ""
        }
    }
    
    // Build the character set based on options
    let charset = ""
    
    if (use_lower == 1) {
        charset = charset + LOWERCASE
    }
    
    if (use_upper == 1) {
        charset = charset + UPPERCASE
    }
    
    if (use_numbers == 1) {
        charset = charset + NUMBERS
    }
    
    if (use_symbols == 1) {
        charset = charset + SYMBOLS
    }
    
    // If no character sets selected, default to lowercase + uppercase + numbers
    if (string.length(charset) == 0) {
        print("Warning: No character sets selected, using default (a-z, A-Z, 0-9)")
        charset = LOWERCASE + UPPERCASE + NUMBERS
    }
    
    // Remove ambiguous characters if specified
    if (avoid_ambiguous == 1) {
        for (let i = 0; i < string.length(AMBIGUOUS); i = i + 1) {
            let ambig_char = string.substring(AMBIGUOUS, i, i + 1)
            charset = string.replace(charset, ambig_char, "")
        }
    }
    
    // Generate the password
    let password = ""
    let charset_length = string.length(charset)
    
    // Ensure we have at least one character from each selected set
    // This ensures the password meets the complexity requirements
    let remaining_length = length
    
    if (use_lower == 1 && remaining_length > 0) {
        let random_index = random.randint(0, string.length(LOWERCASE) - 1)
        password = password + string.substring(LOWERCASE, random_index, random_index + 1)
        remaining_length = remaining_length - 1
    }
    
    if (use_upper == 1 && remaining_length > 0) {
        let random_index = random.randint(0, string.length(UPPERCASE) - 1)
        password = password + string.substring(UPPERCASE, random_index, random_index + 1)
        remaining_length = remaining_length - 1
    }
    
    if (use_numbers == 1 && remaining_length > 0) {
        let random_index = random.randint(0, string.length(NUMBERS) - 1)
        password = password + string.substring(NUMBERS, random_index, random_index + 1)
        remaining_length = remaining_length - 1
    }
    
    if (use_symbols == 1 && remaining_length > 0) {
        let random_index = random.randint(0, string.length(SYMBOLS) - 1)
        password = password + string.substring(SYMBOLS, random_index, random_index + 1)
        remaining_length = remaining_length - 1
    }
    
    // Fill the rest with random characters from the charset
    for (let i = 0; i < remaining_length; i = i + 1) {
        let random_index = random.randint(0, charset_length - 1)
        let next_char = string.substring(charset, random_index, random_index + 1)
        password = password + next_char
    }
    
    // Shuffle the password to randomize the positions of guaranteed characters
    password = shuffle_string(password)
    
    return password
}

// Shuffle a string (Fisher-Yates algorithm)
func shuffle_string(input_string) {
    let chars = []
    let length = string.length(input_string)
    
    // Convert string to array
    for (let i = 0; i < length; i = i + 1) {
        array.push(chars, string.substring(input_string, i, i + 1))
    }
    
    // Shuffle array using Fisher-Yates algorithm
    for (let i = length - 1; i > 0; i = i - 1) {
        let j = random.randint(0, i)
        
        // Swap characters at i and j
        let temp = array.get(chars, i)
        array.set(chars, i, array.get(chars, j))
        array.set(chars, j, temp)
    }
    
    // Convert back to string
    let result = ""
    for (let i = 0; i < length; i = i + 1) {
        result = result + array.get(chars, i)
    }
    
    return result
}

// Generate multiple passwords at once
func generate_multiple_passwords(count, length, use_upper, use_lower, use_numbers, use_symbols, avoid_ambiguous) {
    if (count < 1) {
        print("Error: Count must be at least 1")
        return []
    }
    
    print("Generating " + count + " passwords (length: " + length + "):")
    let passwords = []
    
    for (let i = 0; i < count; i = i + 1) {
        let password = generate_password(length, use_upper, use_lower, use_numbers, use_symbols, avoid_ambiguous)
        array.push(passwords, password)
        print((i + 1) + ". " + password + " - " + rate_password_strength(password))
    }
    
    return passwords
}

// Rate the strength of a password
func rate_password_strength(password) {
    let length = string.length(password)
    let score = 0
    
    // Length contribution: up to 40 points
    if (length >= 16) {
        score = score + 40
    } else if (length >= 12) {
        score = score + 30
    } else if (length >= 8) {
        score = score + 20
    } else if (length >= 6) {
        score = score + 10
    } else {
        score = score + 5
    }
    
    // Character variety contribution: up to 60 points
    let has_lower = 0
    let has_upper = 0
    let has_number = 0
    let has_symbol = 0
    
    for (let i = 0; i < length; i = i + 1) {
        let char = string.substring(password, i, i + 1)
        
        if (string.contains(LOWERCASE, char)) {
            has_lower = 1
        } else if (string.contains(UPPERCASE, char)) {
            has_upper = 1
        } else if (string.contains(NUMBERS, char)) {
            has_number = 1
        } else if (string.contains(SYMBOLS, char)) {
            has_symbol = 1
        }
    }
    
    // Add points for each character type
    score = score + (has_lower * 15)
    score = score + (has_upper * 15)
    score = score + (has_number * 15)
    score = score + (has_symbol * 15)
    
    // Translate score to strength text
    if (score >= 90) {
        return "Very Strong"
    } else if (score >= 70) {
        return "Strong"
    } else if (score >= 50) {
        return "Moderate"
    } else if (score >= 30) {
        return "Weak"
    } else {
        return "Very Weak"
    }
}

// Generate a memorable passphrase from words
func generate_passphrase(word_count, separator) {
    // Word list for passphrases (reduced list for simplicity)
    let word_list = [
        "apple", "banana", "orange", "grape", "kiwi", "mango", "peach", "plum",
        "house", "table", "chair", "window", "door", "floor", "wall", "roof",
        "river", "ocean", "mountain", "forest", "desert", "valley", "lake", "hill",
        "quick", "fast", "slow", "steady", "soft", "hard", "warm", "cold",
        "happy", "smile", "laugh", "jump", "dance", "sing", "play", "work",
        "blue", "green", "red", "yellow", "black", "white", "purple", "orange",
        "cat", "dog", "bird", "fish", "horse", "rabbit", "tiger", "bear",
        "book", "paper", "pencil", "phone", "computer", "tablet", "watch", "clock"
    ]
    
    let list_size = array.length(word_list)
    let passphrase = ""
    
    for (let i = 0; i < word_count; i = i + 1) {
        let random_index = random.randint(0, list_size - 1)
        let word = array.get(word_list, random_index)
        
        // Optionally capitalize or add a number
        if (random.randint(0, 1) == 1) {
            let first_char = string.substring(word, 0, 1)
            let rest_of_word = string.substring(word, 1, string.length(word))
            word = string.to_upper(first_char) + rest_of_word
        }
        
        if (i == 0) {
            passphrase = word
        } else {
            passphrase = passphrase + separator + word
        }
    }
    
    // Add a random number at the end for extra security
    passphrase = passphrase + separator + random.randint(10, 999)
    
    return passphrase
}

// Generate passwords with default options
func quick_generate(count) {
    return generate_multiple_passwords(count, 16, 1, 1, 1, 1, 1)
}

// Display help information
func show_help() {
    print("\n===== PASSWORD GENERATOR HELP =====")
    print("Available functions:")
    print("  generate_password(length, use_upper, use_lower, use_numbers, use_symbols, avoid_ambiguous)")
    print("    - Generate a single password with specific options")
    print("    - All options except length should be 1 (true) or 0 (false)")
    print("\n  generate_multiple_passwords(count, length, use_upper, use_lower, use_numbers, use_symbols, avoid_ambiguous)")
    print("    - Generate multiple passwords at once")
    print("\n  generate_passphrase(word_count, separator)")
    print("    - Generate a memorable passphrase using dictionary words")
    print("    - Example: generate_passphrase(4, \"-\")")
    print("\n  quick_generate(count)")
    print("    - Quickly generate strong passwords with default settings")
    print("    - Example: quick_generate(5)")
    print("\n  rate_password_strength(password)")
    print("    - Evaluate the strength of a password")
    print("    - Example: rate_password_strength(\"MyP@ssw0rd!\")")
}

// Main function to run when executed directly
func main() {
    print("\nSona Password Generator v1.0")
    print("---------------------------")
    print("Type show_help() for available commands")
    
    // Generate a sample password
    let sample = generate_password(12, 1, 1, 1, 1, 1)
    print("\nSample password: " + sample)
    print("Strength: " + rate_password_strength(sample))
    
    // Generate a sample passphrase
    let phrase = generate_passphrase(3, "-")
    print("\nSample passphrase: " + phrase)
    print("Strength: " + rate_password_strength(phrase))
}

// Show help when loaded
show_help()
