// Description: Tracks time spent on tasks with start/stop/pause functionality
// Time Tracker for Sona v0.5.1+
// A developer-friendly tool for tracking time spent on tasks.
// Features:
//   - Start/stop timing of tasks
//   - Pause/resume functionality
//   - Task categorization and reporting
//   - Session history

import utils.time.smod as time
import utils.array.smod as array
import utils.string.smod as string
import utils.math.smod as math

// Global state variables
let active_task = null  // Will be initialized as a dictionary when a task starts
let task_history = []
let is_tracking = 0
let is_paused = 0
let pause_time = 0
let total_pause_duration = 0

// Start timing a new task
func start_task(name, category) {
    // Check if already tracking
    if (is_tracking == 1 && active_task != null) {
        print("Error: Already tracking task '" + active_task.name + "'")
        print("Stop the current task first with stop_task()")
        return 0
    }
    
    // Create a new task
    active_task = {
        "name": name,
        "category": category,
        "start_time": time.now(),
        "end_time": 0,
        "duration": 0,
        "pause_duration": 0,
        "is_completed": 0
    }
    
    is_tracking = 1
    is_paused = 0
    total_pause_duration = 0
    
    print("Started tracking: " + name + " (Category: " + category + ")")
    return 1
}

// Pause the current task
func pause_task() {
    if (is_tracking == 0) {
        print("Error: No active task to pause")
        return 0
    }
    
    if (is_paused == 1) {
        print("Task '" + active_task.name + "' is already paused")
        return 0
    }
    
    pause_time = time.now()
    is_paused = 1
    print("Paused task: " + active_task.name)
    return 1
}

// Resume a paused task
func resume_task() {
    if (is_tracking == 0) {
        print("Error: No active task to resume")
        return 0
    }
    
    if (is_paused == 0) {
        print("Task '" + active_task.name + "' is not paused")
        return 0
    }
    
    let now = time.now()
    let pause_duration = now - pause_time
    total_pause_duration = total_pause_duration + pause_duration
    active_task.pause_duration = total_pause_duration
    
    is_paused = 0
    print("Resumed task: " + active_task.name + " (Paused for: " + format_duration(pause_duration) + ")")
    return 1
}

// Stop timing the current task
func stop_task() {
    if (is_tracking == 0) {
        print("Error: No active task to stop")
        return 0
    }
    
    // If paused, resume first to calculate final pause duration
    if (is_paused == 1) {
        resume_task()
    }
    
    // Complete the task
    active_task.end_time = time.now()
    active_task.duration = active_task.end_time - active_task.start_time - active_task.pause_duration
    active_task.is_completed = 1
    
    // Add to history
    array.push(task_history, active_task)
    
    // Display task summary
    print("\nTask completed: " + active_task.name)
    print("Category: " + active_task.category)
    print("Duration: " + format_duration(active_task.duration))
    if (active_task.pause_duration > 0) {
        print("Pause time: " + format_duration(active_task.pause_duration))
        print("Total time including pauses: " + format_duration(active_task.end_time - active_task.start_time))
    }
    
    // Reset state
    let completed_task = active_task
    active_task = null
    is_tracking = 0
    is_paused = 0
    
    return completed_task
}

// Format a duration in seconds to a human-readable format
func format_duration(seconds) {
    let hours = math.floor(seconds / 3600)
    let mins = math.floor((seconds % 3600) / 60)
    let secs = seconds % 60
    
    let result = ""
    
    if (hours > 0) {
        result = hours + "h "
    }
    
    if (mins > 0 || hours > 0) {
        result = result + mins + "m "
    }
    
    result = result + secs + "s"
    
    return result
}

// Get the current active task status
func get_status() {
    if (is_tracking == 0) {
        print("No active task. Use start_task() to begin tracking.")
        return 0
    }
    
    let now = time.now()
    let current_duration = now - active_task.start_time
    
    if (is_paused == 1) {
        let pause_duration = now - pause_time
        print("\nTask: " + active_task.name + " (PAUSED)")
        print("Category: " + active_task.category)
        print("Started: " + format_time(active_task.start_time))
        print("Paused for: " + format_duration(pause_duration))
        print("Current duration: " + format_duration(current_duration - total_pause_duration))
    } else {
        print("\nTask: " + active_task.name + " (ACTIVE)")
        print("Category: " + active_task.category)
        print("Started: " + format_time(active_task.start_time))
        print("Current duration: " + format_duration(current_duration - total_pause_duration))
    }
    
    return current_duration - total_pause_duration
}

// Format timestamp to readable time
func format_time(timestamp) {
    // For now, just return the timestamp
    // In a full implementation, this would convert to a human-readable format
    return timestamp
}

// Get task history
func get_task_history() {
    let count = array.length(task_history)
    
    if (count == 0) {
        print("No completed tasks in history.")
        return 0
    }
    
    print("\n----- TASK HISTORY -----")
    
    let total_duration = 0
    let categories = {}
    
    for (let i = 0; i < count; i = i + 1) {
        let task = array.get(task_history, i)
        let task_num = i + 1
        
        print(task_num + ". " + task.name + " (" + task.category + "): " + format_duration(task.duration))
        
        total_duration = total_duration + task.duration
        
        // Track time by category
        if (task.category in categories) {
            categories[task.category] = categories[task.category] + task.duration
        } else {
            categories[task.category] = task.duration
        }
    }
    
    print("\nTotal time tracked: " + format_duration(total_duration))
    
    // Display time by category
    print("\nTime by category:")
    for (let category in categories) {
        print(category + ": " + format_duration(categories[category]))
    }
    
    return count
}

// Simulate a timed task with sleep
func simulate_timed_task(name, category, duration) {
    start_task(name, category)
    print("Simulating task for " + duration + " seconds...")
    time.sleep(duration)
    
    // Optional: Simulate a pause in the middle
    if (duration > 3) {
        pause_task()
        print("Paused for 1 second...")
        time.sleep(1)
        resume_task()
    }
    
    time.sleep(duration)
    stop_task()
}

// Get summary report
func get_summary() {
    let count = array.length(task_history)
    
    if (count == 0 && is_tracking == 0) {
        print("No tasks to summarize.")
        return 0
    }
    
    print("\n===== TIME TRACKING SUMMARY =====")
    
    // Display active task if any
    if (is_tracking == 1) {
        let current_duration = time.now() - active_task.start_time - total_pause_duration
        print("\nCurrent task: " + active_task.name)
        print("Status: " + (is_paused == 1 ? "PAUSED" : "ACTIVE"))
        print("Duration: " + format_duration(current_duration))
    }
    
    // Display completed tasks
    if (count > 0) {
        print("\nCompleted tasks: " + count)
        
        let total_time = 0
        for (let i = 0; i < count; i = i + 1) {
            total_time = total_time + array.get(task_history, i).duration
        }
        
        print("Total time tracked: " + format_duration(total_time))
    }
    
    return 1
}

// Display help information
func show_help() {
    print("\n===== TIME TRACKER HELP =====")
    print("Available commands:")
    print("  start_task(name, category) - Start tracking a new task")
    print("  pause_task() - Pause the current task")
    print("  resume_task() - Resume a paused task")
    print("  stop_task() - Stop and save the current task")
    print("  get_status() - Show the current task status")
    print("  get_task_history() - Show all tracked tasks")
    print("  get_summary() - Show a summary report")
    print("  simulate_timed_task(name, category, duration) - Simulate a task for testing")
    print("  show_help() - Display this help message")
    print("\nExample:")
    print("  start_task(\"Bug fixing\", \"Development\")")
    print("  // Work on your task")
    print("  get_status()")
    print("  pause_task()  // Take a break")
    print("  resume_task() // Back to work")
    print("  stop_task()")
}

// Main function to run when executed directly
func main() {
    print("\nSona Time Tracker v1.0")
    print("---------------------")
    print("Type show_help() for available commands")
    
    // Demonstrate with a quick example
    start_task("Demo task", "Example")
    time.sleep(2)
    pause_task()
    time.sleep(1)
    resume_task()
    time.sleep(2)
    stop_task()
    
    print("\nDemo completed. Ready to track your time!")
}

// Show help when loaded
show_help()
