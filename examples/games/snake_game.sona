// Simplified Snake Game for Sona v0.5.1
import native_stdin
import time

// Game variables
let score = 0
let running = 1

func handle_input(key) {
    if key == "w" && direction[1] != 1 {
        direction = [0, -1]
    } else if key == "s" && direction[1] != -1 {
        direction = [0, 1]
    } else if key == "a" && direction[0] != 1 {
        direction = [-1, 0]
    } else if key == "d" && direction[0] != -1 {
        direction = [1, 0]
    }
}

func update_game_state() {
    // Move snake head
    let head = snake[0]
    let x = head[0]
    let y = head[1]
    let dx = direction[0]
    let dy = direction[1]
    let new_head = [x + dx, y + dy]
    
    // Check collisions
    if is_collision(new_head) {
        game_over()
        return false
    }
      // Check food
    if new_head[0] == food[0] && new_head[1] == food[1] {
        score = score + 10
        snake.insert(0, new_head)
        spawn_food()
    } else {
        snake.insert(0, new_head)
        snake.pop()
    }
    return true
}

func draw_board() {
    console.clear()
    // Draw snake
    let i = 0
    while i < snake.length {
        let segment = snake[i]
        let x = segment[0]
        let y = segment[1]
        console.set_cursor_position(x, y)
        console.write("■", "green")
        i = i + 1
    }
    // Draw food
    let fx = food[0]
    let fy = food[1]
    console.set_cursor_position(fx, fy)
    console.write("●", "red")
    // Draw score
    console.set_cursor_position(0, BOARD_HEIGHT + 1)
    console.write("Score: " + score)
}

func is_collision(pos) {
    let x = pos[0]
    let y = pos[1]
    // Wall collision
    if x < 0 || x >= BOARD_WIDTH || y < 0 || y >= BOARD_HEIGHT {
        return true
    }
    // Self collision - check if pos is in snake tail
    let i = 1
    while i < snake.length {
        let segment = snake[i]
        if segment[0] == x && segment[1] == y {
            return true
        }
        i = i + 1
    }
    return false
}

func spawn_food() {
    while true {
        let x = random.randint(0, BOARD_WIDTH - 1)
        let y = random.randint(0, BOARD_HEIGHT - 1)
        let food_pos = [x, y]
          // Check if food position conflicts with snake
        let conflict = false
        let i = 0
        while i < snake.length {
            let segment = snake[i]        if segment[0] == x && segment[1] == y {
                conflict = true
                break
            }
            i = i + 1
        }
          if !conflict {
            food = food_pos
            break
        }
    }
}

func game_over() {
    console.set_cursor_position(BOARD_WIDTH/2 - 4, BOARD_HEIGHT/2)
    console.write("GAME OVER!")
    console.set_cursor_position(BOARD_WIDTH/2 - 6, BOARD_HEIGHT/2 + 1)
    console.write("Final Score: " + score)
    time.sleep(2)
}

// Main game loop
func main() {
    // Setup console
    console.hide_cursor()
    console.clear()
    
    // Initialize game state
    snake = [[5, 5]]  // Starting position
    direction = [1, 0]  // Moving right
    let x = random.randint(0, BOARD_WIDTH - 1)
    let y = random.randint(0, BOARD_HEIGHT - 1)
    food = [x, y]
    score = 0
      // Main game loop
    while true {
        // Handle input
        let key = native_stdin.input_timeout(TICK_RATE)
        handle_input(key)
        
        // Update and draw
        let continue_game = update_game_state()        if !continue_game {
            break
        }
        draw_board()
        
        time.sleep(TICK_RATE)
    }
    
    // Cleanup
    console.show_cursor()
}

main()