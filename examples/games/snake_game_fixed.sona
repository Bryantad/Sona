// Snake Game with proper syntax for Sona v0.5.1
import console from "stdlib/console"
import stdin from "stdlib/stdin"
import time from "stdlib/time" 
import math from "stdlib/math"
import random from "stdlib/random"

// Game dimensions and settings
let WIDTH = 20
let HEIGHT = 15
let DELAY = 100  // Milliseconds between updates

// Game state
let snake_x = []
let snake_y = []
let food_x = 0
let food_y = 0
let direction = "r"  // r = right, l = left, u = up, d = down
let game_over = false
let score = 0

// Initialize the game
func init_game() {
    // Initial snake position (3 segments)
    snake_x.push(3)
    snake_y.push(5)
    
    snake_x.push(2)
    snake_y.push(5)
    
    snake_x.push(1)
    snake_y.push(5)
    
    // Place initial food
    place_food()
    
    // Set up console
    console.clear()
    console.hide_cursor()
}

// Clean up when game ends
func cleanup() {
    console.move_cursor(0, HEIGHT + 3)
    console.show_cursor()
}

// Place food at a random location
func place_food() {
    let valid = false
    
    while !valid {
        food_x = math.floor(random.random() * WIDTH)
        food_y = math.floor(random.random() * HEIGHT)
        
        // Make sure food is not on snake
        valid = true
        for i in range(0, snake_x.length()) {
            if snake_x[i] == food_x && snake_y[i] == food_y {
                valid = false
                break
            }
        }
    }
}

// Process keyboard input
func handle_input() {
    let key = stdin.read_key(1)  // Non-blocking with 1ms timeout
    
    if key == "w" && direction != "d" {
        direction = "u"
    } else if key == "s" && direction != "u" {
        direction = "d"
    } else if key == "a" && direction != "r" {
        direction = "l"
    } else if key == "d" && direction != "l" {
        direction = "r"
    } else if key == "q" {
        game_over = true
    }
}

// Update game state
func update() {
    // Get head position
    let head_x = snake_x[0]
    let head_y = snake_y[0]
    
    // Calculate new head position
    let new_x = head_x
    let new_y = head_y
    
    if direction == "r" {
        new_x += 1
    } else if direction == "l" {
        new_x -= 1
    } else if direction == "u" {
        new_y -= 1
    } else if direction == "d" {
        new_y += 1
    }
    
    // Check for collisions with walls
    if new_x < 0 || new_x >= WIDTH || new_y < 0 || new_y >= HEIGHT {
        game_over = true
        return
    }
    
    // Check for self-collision
    for i in range(0, snake_x.length()) {
        if snake_x[i] == new_x && snake_y[i] == new_y {
            game_over = true
            return
        }
    }
    
    // Check if food was eaten
    let ate_food = false
    if new_x == food_x && new_y == food_y {
        ate_food = true
        score += 10
        place_food()
    }
    
    // Add new head
    snake_x.unshift(new_x)
    snake_y.unshift(new_y)
    
    // Remove tail if no food was eaten
    if !ate_food {
        snake_x.pop()
        snake_y.pop()
    }
}

// Render the game
func render() {
    console.clear()
    
    // Draw top border
    console.move_cursor(0, 0)
    console.write("+" + "-" * WIDTH + "+")
    
    // Draw game area and snake
    for y in range(0, HEIGHT) {
        console.move_cursor(0, y + 1)
        console.write("|")
        
        for x in range(0, WIDTH) {
            console.move_cursor(x + 1, y + 1)
            
            // Draw snake
            let is_snake = false
            for i in range(0, snake_x.length()) {
                if snake_x[i] == x && snake_y[i] == y {
                    if i == 0 {
                        console.write("O", "green")  // Head
                    } else {
                        console.write("o", "green")  // Body
                    }
                    is_snake = true
                    break
                }
            }
            
            // Draw food
            if !is_snake && x == food_x && y == food_y {
                console.write("*", "red")
            } else if !is_snake {
                console.write(" ")
            }
        }
        
        console.move_cursor(WIDTH + 1, y + 1)
        console.write("|")
    }
    
    // Draw bottom border
    console.move_cursor(0, HEIGHT + 1)
    console.write("+" + "-" * WIDTH + "+")
    
    // Draw score
    console.move_cursor(0, HEIGHT + 2)
    console.write("Score: " + score + "  Controls: WASD to move, Q to quit")
}

// Main game loop
func main() {
    init_game()
    
    while !game_over {
        handle_input()
        update()
        render()
        time.sleep(DELAY / 1000)
    }
    
    // Game over message
    console.move_cursor(WIDTH / 2 - 5, HEIGHT / 2)
    console.write("GAME OVER", "red")
    console.move_cursor(WIDTH / 2 - 7, HEIGHT / 2 + 1)
    console.write("Final Score: " + score)
    
    // Wait before exiting
    cleanup()
    print("\nGame Over! Final Score: " + score)
}

// Start the game
main()
