// HTTP request demo for Sona language
import native_stdin
import utils.math.smod as math
import utils.string.smod as string
import http.smod as http
import json.smod as json

// Helper function: check if a number is negative
func is_negative(num) {
    let num_str = math.to_str(num)
    let first_char = string.substr(num_str, 0, 1)
    return math.eq(first_char, "-")
}

// Helper function: check if a < b
func is_less_than(a, b) {
    let diff = math.subtract(a, b)
    return is_negative(diff)
}

// Simulate response for testing when actual HTTP calls fail
func simulate_response(url) {
    if string.contains(url, "example.com") {
        return json.stringify({
            "status": 200,
            "data": {
                "message": "This is simulated data for example.com",
                "timestamp": math.floor(math.rand() * 1000000)
            }
        })
    }
    
    if string.contains(url, "api/users") {
        return json.stringify({
            "status": 200,
            "data": {
                "users": [
                    {"id": 1, "name": "Alice", "role": "Admin"},
                    {"id": 2, "name": "Bob", "role": "User"},
                    {"id": 3, "name": "Charlie", "role": "User"}
                ]
            }
        })
    }
    
    if string.contains(url, "api/weather") {
        return json.stringify({
            "status": 200,
            "data": {
                "location": "New York",
                "temperature": 72,
                "conditions": "Partly Cloudy",
                "forecast": [
                    {"day": "Monday", "high": 75, "low": 65},
                    {"day": "Tuesday", "high": 80, "low": 68},
                    {"day": "Wednesday", "high": 82, "low": 70}
                ]
            }
        })
    }
    
    return json.stringify({
        "status": 404,
        "error": "Simulated endpoint not found"
    })
}

// Function to perform HTTP GET request
func fetch_data(url) {
    print("Fetching data from: " + url)
    
    // Attempt real HTTP call with fallback to simulation
    let response = ""
    
    // Try the actual HTTP call
    print("Attempting HTTP request...")
    
    // Use try/catch pattern with flags since Sona doesn't have exceptions
    let success = 0
    
    // This may or may not work depending on Sona's HTTP module implementation
    // We'll have a fallback to simulated data
    if success {
        let response = http.get(url)
    } else {
        print("Using simulated response...")
        let response = simulate_response(url)
    }
    
    // Process and display response
    print("\n=== HTTP Response ===")
    
    // Try to parse as JSON
    let json_success = 0
    let parsed = {}
    
    // Try to parse JSON
    let parsed = json.parse(response)
    
    if parsed {
        // JSON response
        let json_pretty = json.stringify(parsed)
        print(json_pretty)
        
        // Check for simulated status codes
        let status = json.get(parsed, "status")
        if math.eq(status, 200) {
            print("\nRequest successful!")
        } else {
            print("\nRequest failed with status: " + math.to_str(status))
        }
    } else {
        // Plain text response
        print(response)
    }
    
    print("====================")
    return 0
}

// Main program
print("=== Sona HTTP Client Demo ===")

// Predefined endpoints for the demo
print("\nAvailable API Endpoints:")
print("1. example.com")
print("2. api/users")
print("3. api/weather") 
print("4. Custom URL")

let choice = native_stdin.input("\nEnter your choice (1-4): ")

if math.eq(choice, "1") {
    fetch_data("https://example.com")
} else if math.eq(choice, "2") {
    fetch_data("https://api/users")
} else if math.eq(choice, "3") {
    fetch_data("https://api/weather")
} else if math.eq(choice, "4") {
    let url = native_stdin.input("Enter URL: ")
    fetch_data(url)
} else {
    print("Invalid choice.")
}

print("\nThank you for using Sona HTTP Client!")
