// Snake game implementation for Sona language
import native_stdin
import utils.math.smod as math
import utils.array.smod as array
import utils.string.smod as string

// Constants for the game
let BOARD_WIDTH = 15
let BOARD_HEIGHT = 10
let EMPTY = " "
let SNAKE_BODY = "O"
let SNAKE_HEAD = "@"
let FOOD = "*"
let WALL = "#"

// Global variables
let snake_x = [5]  // X coordinates of snake segments
let snake_y = [5]  // Y coordinates of snake segments
let food_x = 7
let food_y = 7
let direction = "right"
let running = 1  // 1 for true, 0 for false
let score = 0
let grow = 0  // 1 for true, 0 for false

// Helper function: check if a number is negative
func is_negative(num) {
    let num_str = math.to_str(num)
    let first_char = string.substr(num_str, 0, 1)
    return math.eq(first_char, "-")
}

// Helper function: check if a < b
func is_less_than(a, b) {
    let diff = math.subtract(a, b)
    return is_negative(diff)
}

// Helper function: check if a > b
func is_greater_than(a, b) {
    return is_less_than(b, a)
}

// Helper function: check if a <= b
func is_less_than_eq(a, b) {
    if math.eq(a, b) {
        return 1
    }
    return is_less_than(a, b)
}

// Helper function: check if a >= b
func is_greater_than_eq(a, b) {
    if math.eq(a, b) {
        return 1
    }
    return is_greater_than(a, b)
}

// Generate a new random food position
func generate_food() {
    let x = math.floor(math.rand() * BOARD_WIDTH)
    let y = math.floor(math.rand() * BOARD_HEIGHT)
    
    // Check for collision with snake
    let valid = 1
    let i = 0
    let snake_len = array.length(snake_x)
    
    while is_less_than(i, snake_len) {
        if math.eq(array.get(snake_x, i), x) {
            if math.eq(array.get(snake_y, i), y) {
                let valid = 0
            }
        }
        let i = i + 1
    }
    
    if valid {
        let food_x = x
        let food_y = y
    } else {
        // Try again
        generate_food()
    }
}

// Check if snake head has collided with food
func check_food_collision() {
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    if math.eq(head_x, food_x) {
        if math.eq(head_y, food_y) {
            let score = score + 10
            let grow = 1
            generate_food()
        }
    }
}

// Check if snake has collided with wall
func check_wall_collision() {
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Check boundaries
    if is_less_than(head_x, 0) {
        let running = 0
        print("\nGame Over! Snake hit the left wall.")
        return 0
    }
    
    if is_less_than(head_y, 0) {
        let running = 0
        print("\nGame Over! Snake hit the top wall.")
        return 0
    }
    
    if is_greater_than_eq(head_x, BOARD_WIDTH) {
        let running = 0
        print("\nGame Over! Snake hit the right wall.")
        return 0
    }
    
    if is_greater_than_eq(head_y, BOARD_HEIGHT) {
        let running = 0
        print("\nGame Over! Snake hit the bottom wall.")
        return 0
    }
}

// Check if snake has collided with itself
func check_self_collision() {
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Start from 1 to skip head
    let i = 1
    let snake_len = array.length(snake_x)
    
    while is_less_than(i, snake_len) {
        let segment_x = array.get(snake_x, i)
        let segment_y = array.get(snake_y, i)
        
        if math.eq(head_x, segment_x) {
            if math.eq(head_y, segment_y) {
                let running = 0
                print("\nGame Over! Snake collided with itself.")
                print("Final Score: " + math.to_str(score))
                return 0
            }
        }
        let i = i + 1
    }
}

// Move the snake in the specified direction
func move_snake() {
    // Get current head position
    let head_x = array.get(snake_x, 0)
    let head_y = array.get(snake_y, 0)
    
    // Calculate new head position
    let new_x = head_x
    let new_y = head_y
    
    if math.eq(direction, "up") {
        let new_y = head_y - 1
    }
    
    if math.eq(direction, "down") {
        let new_y = head_y + 1
    }
    
    if math.eq(direction, "left") {
        let new_x = head_x - 1
    }
    
    if math.eq(direction, "right") {
        let new_x = head_x + 1
    }
    
    // Create new arrays with the new head position
    let new_snake_x = [new_x]
    let new_snake_y = [new_y]
    
    // Add the rest of the body
    let i = 0
    let snake_len = array.length(snake_x)
    
    while is_less_than(i, snake_len) {
        array.push(new_snake_x, array.get(snake_x, i))
        array.push(new_snake_y, array.get(snake_y, i))
        let i = i + 1
    }
    
    // Update snake arrays
    let snake_x = new_snake_x
    let snake_y = new_snake_y
    
    // Remove tail if not growing
    if grow {
        let grow = 0  // Reset grow flag
    } else {
        // Pop the last element (we added original head + new head)
        array.pop(snake_x)
        array.pop(snake_y)
    }
}

// Draw the game board
func draw_board() {
    // Clear console with newlines
    print("\n\n\n\n\n\n\n\n\n\n")
    
    // Top border
    let border = ""
    let i = 0
    while is_less_than(i, BOARD_WIDTH + 2) {
        let border = border + WALL
        let i = i + 1
    }
    print(border)
    
    // Draw rows
    let y = 0
    while is_less_than(y, BOARD_HEIGHT) {
        let row = WALL  // Left border
        
        let x = 0
        while is_less_than(x, BOARD_WIDTH) {
            // Default to empty space
            let cell = EMPTY
            
            // Check if cell contains snake
            let s = 0
            let snake_len = array.length(snake_x)
            
            while is_less_than(s, snake_len) {
                if math.eq(array.get(snake_x, s), x) {
                    if math.eq(array.get(snake_y, s), y) {
                        if math.eq(s, 0) {
                            let cell = SNAKE_HEAD  // Head
                        } else {
                            let cell = SNAKE_BODY  // Body
                        }
                    }
                }
                let s = s + 1
            }
            
            // Check if cell contains food
            if math.eq(x, food_x) {
                if math.eq(y, food_y) {
                    let cell = FOOD
                }
            }
            
            let row = row + cell
            let x = x + 1
        }
        
        let row = row + WALL  // Right border
        print(row)
        let y = y + 1
    }
    
    // Bottom border
    print(border)
    
    // Print game info
    print("Score: " + math.to_str(score) + " | Length: " + math.to_str(array.length(snake_x)))
    print("Controls: up, down, left, right, exit")
}

// Check if input is a valid direction
func is_valid_direction(input) {
    if math.eq(input, "up") {
        return 1
    }
    
    if math.eq(input, "down") {
        return 1
    }
    
    if math.eq(input, "left") {
        return 1
    }
    
    if math.eq(input, "right") {
        return 1
    }
    
    return 0
}

// Initialize food
generate_food()

// Main game loop
while running {
    draw_board()
    let input = native_stdin.input("Move: ")
    
    if math.eq(input, "exit") {
        let running = 0
    } else if is_valid_direction(input) {
        let direction = input
        move_snake()
        check_food_collision()
        check_wall_collision()
        check_self_collision()
    }
}

print("Thanks for playing Snake! Final score: " + math.to_str(score))
