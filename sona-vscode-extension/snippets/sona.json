{
    "Function Definition": {
        "prefix": "def",
        "body": [
            "def ${1:function_name}(${2:params}) {",
            "    ${3:// Function body}",
            "    return ${4:result}",
            "}"
        ],
        "description": "Define a new function"
    },
    "Cognitive Remember": {
        "prefix": "remember",
        "body": [
            "remember(\"${1:key}\", ${2:value})"
        ],
        "description": "Store a value in cognitive memory"
    },
    "Cognitive Recall": {
        "prefix": "recall",
        "body": [
            "recall(\"${1:key}\")"
        ],
        "description": "Retrieve a value from cognitive memory"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "    ${2:// Code block}",
            "}"
        ],
        "description": "If conditional statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "    ${2:// If block}",
            "} else {",
            "    ${3:// Else block}",
            "}"
        ],
        "description": "If-else conditional statement"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for (${1:item} in ${2:iterable}) {",
            "    ${3:// Loop body}",
            "}"
        ],
        "description": "For loop iteration"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "while (${1:condition}) {",
            "    ${2:// Loop body}",
            "}"
        ],
        "description": "While loop"
    },
    "Class Definition": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName} {",
            "    def __init__(${2:self, params}) {",
            "        ${3:// Constructor}",
            "    }",
            "    ",
            "    def ${4:method_name}(${5:self, params}) {",
            "        ${6:// Method body}",
            "    }",
            "}"
        ],
        "description": "Define a new class"
    },
    "Try-Catch": {
        "prefix": "try",
        "body": [
            "try {",
            "    ${1:// Code that might fail}",
            "} catch (${2:error}) {",
            "    ${3:// Handle error}",
            "}"
        ],
        "description": "Try-catch error handling"
    },
    "AI Simplify": {
        "prefix": "ai_simplify",
        "body": [
            "ai_simplify(\"${1:Complex code or concept to simplify}\")"
        ],
        "description": "Use AI to simplify complex code"
    },
    "AI Break Down": {
        "prefix": "ai_break_down",
        "body": [
            "ai_break_down(\"${1:Problem to break into smaller parts}\")"
        ],
        "description": "Use AI to break down a problem"
    },
    "AI Debug": {
        "prefix": "ai_debug",
        "body": [
            "ai_debug(\"${1:Code with potential issues}\")"
        ],
        "description": "Use AI to debug code"
    },
    "AI Optimize": {
        "prefix": "ai_optimize",
        "body": [
            "ai_optimize(\"${1:Code to optimize}\")"
        ],
        "description": "Use AI to optimize code performance"
    },
    "Focus Block": {
        "prefix": "focus",
        "body": [
            "focus {",
            "    ${1:// Distraction-free code block}",
            "}"
        ],
        "description": "Create a focus-optimized code block"
    },
    "Mindful Block": {
        "prefix": "mindful",
        "body": [
            "mindfully {",
            "    ${1:// Mindful coding block}",
            "}"
        ],
        "description": "Create a mindful coding block"
    },
    "Accessible Function": {
        "prefix": "accessible",
        "body": [
            "// Accessible: ${1:Description of what this function does}",
            "def ${2:function_name}(${3:params}) {",
            "    // Clear, step-by-step implementation",
            "    ${4:// Step 1: }",
            "    ",
            "    // Step 2: ",
            "    ",
            "    return ${5:result}",
            "}"
        ],
        "description": "Create an accessible, well-documented function"
    },
    "Console Output": {
        "prefix": "print",
        "body": [
            "print(${1:\"Hello, Sona!\"})"
        ],
        "description": "Print output to console"
    },
    "Variable Assignment": {
        "prefix": "let",
        "body": [
            "let ${1:variable_name} = ${2:value}"
        ],
        "description": "Create a variable"
    },
    "Comment Block": {
        "prefix": "comment",
        "body": [
            "/*",
            " * ${1:Multi-line comment}",
            " * ${2:Additional description}",
            " */"
        ],
        "description": "Multi-line comment block"
    }
}