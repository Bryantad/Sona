# Performance Benchmarking Test
# Use this file to test Sona's performance capabilities

import time

print("⚡ Sona Performance Benchmark Suite")
print("=" * 40)

# Test 1: Loop Performance
print("🔄 Testing loop performance...")
start_time = time.time()

total = 0
for i in range(10000):
    total += i * 2

end_time = time.time()
loop_time = end_time - start_time
print(f"Loop result: {total}")
print(f"Loop time: {loop_time:.4f}s")

# Test 2: Function Call Performance
def fibonacci(n):
    if (n <= 1):
        return n;
    return fibonacci(n-1) + fibonacci(n-2);

print("\n🧮 Testing recursive function performance...")
start_time = time.time()

fib_result = fibonacci(25)

end_time = time.time()
fib_time = end_time - start_time
print(f"Fibonacci(25): {fib_result}")
print(f"Fibonacci time: {fib_time:.4f}s")

# Test 3: Memory Operations
print("\n🧠 Testing memory operations...")
start_time = time.time()

for i in range(1000):
    remember(f"key_{i}", f"value_{i}")

for i in range(1000):
    result = recall(f"key_{i}")

end_time = time.time()
memory_time = end_time - start_time
print(f"Memory operations time: {memory_time:.4f}s")

# Test 4: String Operations
print("\n📝 Testing string operations...")
start_time = time.time()

text = ""
for i in range(1000):
    text += f"Sona is awesome! {i} "

end_time = time.time()
string_time = end_time - start_time
print(f"String length: {len(text)}")
print(f"String operations time: {string_time:.4f}s")

print("\n" + "=" * 40)
print("📊 Benchmark Summary:")
print(f"  Loop performance:     {loop_time:.4f}s")
print(f"  Function performance: {fib_time:.4f}s") 
print(f"  Memory performance:   {memory_time:.4f}s")
print(f"  String performance:   {string_time:.4f}s")

total_time = loop_time + fib_time + memory_time + string_time
print(f"  Total benchmark time: {total_time:.4f}s")
print("✅ Benchmark complete!")
