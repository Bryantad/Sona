//
// Sona Language Grammar v0.8.0
// Unified Grammar supporting both classic syntax and documented cognitive syntax
//

start: statement+

?statement: expr
     | import_stmt
     | var_assignment
     | bare_assignment
     | destructuring_assignment
     | print_stmt
     | show_stmt
     | think_stmt
     | calculate_stmt
     | if_stmt
     | when_stmt
     | match_stmt
     | while_stmt
     | for_stmt
     | repeat_stmt
     | func_def
     | class_def
     | try_stmt
     | return_stmt
     | break_stmt
     | continue_stmt

// ======== Classic Assignment ========
var_assignment: ("let" | "const") NAME "=" expr -> var_assign

// ======== Cognitive Syntax ========
// Bare assignment (documented style)
bare_assignment: NAME "=" expr -> bare_assign

// Destructuring assignment (for arrays/objects)
destructuring_assignment: "[" NAME ("," NAME)* "]" "=" expr -> destructure_assign

// Output statements
print_stmt: "print" "(" expr ")" -> print_stmt
show_stmt: "show" expr -> show_stmt

// Cognitive comments
think_stmt: "think" STRING -> think_stmt

// Cognitive assignment
calculate_stmt: "calculate" NAME "=" expr -> calculate_assign

// Cognitive conditionals
when_stmt: "when" expr ":" _NEWLINE _INDENT statement+ _DEDENT ["else" ":" _NEWLINE _INDENT statement+ _DEDENT] -> when_stmt

// Classic conditionals
if_stmt: "if" expr "{" statement* "}" ["else" "{" statement* "}"] -> if_stmt
match_stmt: "match" expr "{" match_case+ "}" -> match_stmt
match_case: (expr | "_") "=>" (expr | "{" statement* "}") -> match_case

// ======== Classic Loops ========
while_stmt: "while" expr "{" statement* "}" -> while_stmt
for_stmt: "for" NAME "in" expr "{" statement* "}" -> for_stmt

// ======== Cognitive Loops ========
// Basic repeat loop: repeat 5 times:
repeat_stmt: "repeat" expr "times" ":" _NEWLINE _INDENT statement+ _DEDENT -> repeat_times
           // List iteration: repeat for each item in items:
           | "repeat" "for" "each" NAME "in" expr ":" _NEWLINE _INDENT statement+ _DEDENT -> repeat_for_each
           // Range iteration: repeat for i from 1 to 10:
           | "repeat" "for" NAME "from" expr "to" expr ":" _NEWLINE _INDENT statement+ _DEDENT -> repeat_for_range
           // Range with step: repeat for i from 1 to 10 step 2:
           | "repeat" "for" NAME "from" expr "to" expr "step" expr ":" _NEWLINE _INDENT statement+ _DEDENT -> repeat_for_range_step

// ======== Function Definition ========
func_def: "func" NAME "(" [param_list] ")" "{" statement* "}" -> func_def
param_list: NAME ("," NAME)*

// ======== Class Definition ========
class_def: "class" NAME ["(" NAME ")"] "{" class_body "}" -> class_def
class_body: (method_def | property_def)*
method_def: "method" NAME "(" [param_list] ")" "{" statement* "}" -> method_def
property_def: "property" NAME ["=" expr] -> property_def

// ======== Other Statements ========
return_stmt: "return" expr -> return_stmt
break_stmt: "break" -> break_stmt
continue_stmt: "continue" -> continue_stmt
try_stmt: "try" "{" statement* "}" "catch" NAME "{" statement* "}" ["finally" "{" statement* "}"] -> try_stmt
import_stmt: "import" NAME ["." NAME]* ["as" NAME] -> import_stmt

// ======== Expressions ========
?expr: or_expr

?or_expr: and_expr
        | or_expr "||" and_expr -> or_op

?and_expr: comparison
         | and_expr "&&" comparison -> and_op

?comparison: sum
           | comparison "==" sum -> eq
           | comparison "!=" sum -> neq
           | comparison ">" sum -> gt
           | comparison "<" sum -> lt
           | comparison ">=" sum -> gte
           | comparison "<=" sum -> lte

?sum: product
    | sum "+" product -> add
    | sum "-" product -> sub

?product: unary
        | product "*" unary -> mul
        | product "/" unary -> div
        | product "%" unary -> mod

?unary: atom
      | "-" unary -> neg
      | "!" unary -> not

// ======== Atom-level Expressions ========
?atom: "(" expr ")"
     | NUMBER         -> number
     | STRING         -> string
     | "true"         -> true_val
     | "false"        -> false_val
     | array_literal  -> array
     | dict_literal   -> dict
     | func_call
     | method_call
     | property_access
     | index_access
     | NAME           -> var

// ======== Data Structures ========
array_literal: "[" [expr ("," expr)*] "]"
dict_literal: "{" [dict_item ("," dict_item)*] "}"
dict_item: (STRING | NAME) ":" expr

// ======== Object Access ========
func_call: NAME "(" [args] ")" -> func_call
method_call: expr "." NAME "(" [args] ")" -> method_call
property_access: expr "." NAME -> property_access
index_access: expr "[" expr "]" -> index_access

// ======== Arguments ========
args: expr ("," expr)*

// ======== Terminals ========
STRING: /("(?:[^"\\]|\\.)*")|('(?:[^'\\]|\\.)*')/
NUMBER: /[0-9]+(\.[0-9]+)?/
NAME: /[a-zA-Z_][a-zA-Z0-9_]*/

// ======== Indentation Handling ========
_NEWLINE: /\n/
_INDENT: /  +/
_DEDENT: /  -/

// ======== Whitespace and Comments ========
COMMENT: /\/\/[^\n]*/
%import common.WS_INLINE
%ignore WS_INLINE
%ignore COMMENT
