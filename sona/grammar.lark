start: statement+

?statement: import_stmt
          | assignment
          | print_stmt
          | if_stmt
          | while_stmt
          | for_stmt
          | func_def
          | return_stmt
          | expr

import_stmt: "import" NAME ("." NAME)* ["as" NAME] -> import_stmt
assignment: ("let" | "const") NAME "=" expr
print_stmt: "print" "(" expr ")"
return_stmt: "return" expr

if_stmt: "if" expr block ["else" block]
while_stmt: "while" expr block
for_stmt: "for" NAME "in" expr ".." expr block
func_def: "func" NAME "(" param_list? ")" block
param_list: NAME (COMMA NAME)*  -> param_list

block: "{" (_NL | statement)* "}"
_NL: /(\r?\n)+/
%ignore _NL

?expr: expr "+" term   -> add
     | expr "-" term   -> sub
     | term

?term: term "*" factor -> mul
     | term "/" factor -> div
     | factor

?factor: "-" factor             -> neg
       | "+" factor             -> pos
       | dotted_func_call
       | dotted_name            -> var
       | NAME "(" [args] ")"    -> func_call
       | array_literal          -> array
       | NUMBER                 -> number
       | STRING                 -> string
       | NAME                   -> var
       | "(" expr ")"

array_literal: "[" [array_items] "]"
array_items: expr ("," expr)*

dotted_func_call: dotted_name "(" [args] ")" -> func_call
dotted_name: NAME ("." NAME)+

args: expr ("," expr)*

COMMA: ","
STRING: /"(?:[^"\\]|\\.)*"/ | /'(?:[^'\\]|\\.)*'/ | /"""(?:[^\\]|\\.)*"""/ | /'''(?:[^\\]|\\.)*'''/

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE
%import common.SH_COMMENT -> HASH_COMMENT // Or any alias you prefer

_COMMENT: /\/\/.*?(?:\n|$)/
// Enhanced support for inline comments and end-of-line comments
_INLINE_COMMENT: /\/\/[^\n]*/
%ignore _COMMENT
%ignore _INLINE_COMMENT
%ignore HASH_COMMENT
%ignore WS_INLINE