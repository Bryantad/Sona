import importlib.util
import importlib
import os
import math 
from lark import Lark, Transformer, Tree, Token, UnexpectedInput
from pathlib import Path
from sona.utils.debug import debug, warn, error

# Native module imports
from sona.stdlib import (
    env as env_module,
    time as time_module,
)

from sona.stdlib.native_stdin import native_stdin

class ReturnSignal(Exception):
    def __init__(self, value):
        self.value = value

class SonaInterpreter(Transformer):
    def __init__(self):
        super().__init__()
        self.env = [{}]
        self.functions = {}
        self.modules = {}

        # Register native modules
        self.modules["native_stdin"] = native_stdin
        self.modules["env"] = {
            "get": env_module.get,
            "set": env_module.set,
        }
        self.modules["time"] = {
            "now": time_module.now,
            "sleep": time_module.sleep,
        }

        # Preload commonly used modules
        try:
            from sona.stdlib.utils.array.smod import array
            self.modules["array"] = array
            debug(f"Preloaded array module: {dir(array)}")
        except ImportError:
            debug("Could not preload array module")

    def push_scope(self):
        self.env.append({})

    def pop_scope(self):
        self.env.pop()

    def set_var(self, name, value):
        self.env[-1][name] = value

    def get_var(self, name):
        for scope in reversed(self.env):
            if name in scope:
                return scope[name]
        raise NameError(f"Variable '{name}' not found")

    def var(self, args):
        # Handle dotted_name: join tokens with '.'
        if isinstance(args[0], Tree) and args[0].data == "dotted_name":
            names = [str(t.value) for t in args[0].children]
            # Get the first part (e.g., math from math.PI)
            base_name = names[0]
            obj = self.get_var(base_name)
            
            # Then traverse the object properties
            for name in names[1:]:
                if hasattr(obj, name):
                    obj = getattr(obj, name)
                elif isinstance(obj, dict) and name in obj:
                    obj = obj[name]
                else:
                    raise AttributeError(f"'{base_name}' has no attribute '{name}'")
            return obj
        else:
            name = str(args[0])
            return self.get_var(name)

    def eval_arg(self, arg):
        return self._eval(arg) if isinstance(arg, Tree) else arg

    def array(self, args):
        """Handle array literals like [1, 2, 3]"""
        if not args:
            return []
        if isinstance(args[0], list):
            # Already evaluated list, return as is
            return args[0]
        if hasattr(args[0], 'children'):
            # Parse array items from AST
            return [self.eval_arg(item) for item in args[0].children]
        return [self.eval_arg(item) for item in args]
    
    def array_literal(self, args):
        """Handle array literal syntax by creating a flat list"""
        return self.array(args)
    
    def array_items(self, args):
        """Process array items into a flat list"""
        return [self.eval_arg(item) for item in args]

    def neg(self, args):
        return -self.eval_arg(args[0])

    def pos(self, args):
        return +self.eval_arg(args[0])

    def not_op(self, args):
        return not self.eval_arg(args[0])

    def _eval(self, node):
        return self.transform(node)

    def _exec(self, node):
        if isinstance(node, Tree):
            self.transform(node)
        elif isinstance(node, list):
            for n in node:
                self._exec(n)    def import_stmt(self, args):
        # Check if the last argument is an alias (after 'as' keyword)
        alias = None
        if len(args) >= 2 and str(args[-2]) == "as":
            alias = str(args[-1])
            # Remove 'as' and alias name from args for module name construction
            args = args[:-2]
        
        module_name = ".".join(str(a) for a in args)
        debug(f"Importing module: {module_name}")
        if alias:
            debug(f"Using alias: {alias}")

        try:
            # Normalize module path parts
            module_parts = module_name.split(".")
            base_name = ""
            
            # For .smod file imports
            if module_name.endswith("smod"):
                # Get the proper base name (e.g., array from utils.array.smod)
                if len(module_parts) > 1:
                    base_name = module_parts[-2]
                else:
                    base_name = module_parts[0].replace(".smod", "")
                    
                # Convert to Python module path
                py_module = "sona.stdlib." + module_name
            else:
                # For regular imports
                py_module = "sona.stdlib." + module_name
                base_name = module_parts[-1]
            
            # Store the original name for later reference
            original_name = base_name
            # If an alias was provided, use that as the registered name
            register_name = alias if alias else base_name
            
            debug(f"Loading module from {py_module}")
            debug(f"Using name: {base_name}")
            debug(f"Python module path: {py_module}")
            
            # Ensure the module exists using platform-independent paths
            base_path = Path(__file__).parent
            # Use the last part of module name for file lookup, not the alias
            last_module_part = module_parts[-1]
            module_path = base_path / 'stdlib' / Path(*module_parts[:-1]) / f"{last_module_part}.py"
            if not module_path.is_file():
                module_path = module_path.with_suffix(".smod")
                if not module_path.is_file():
                    raise ImportError(f"Module file not found: {module_path}")
            
            mod = importlib.import_module(py_module)
            
            # Try to find the module instance
            instance = None
            
            # First check if module exports the instance directly
            if hasattr(mod, base_name):
                instance = getattr(mod, base_name)
                debug(f"Found instance directly: {type(instance)}")
            # Then check __all__ 
            elif hasattr(mod, "__all__") and base_name in getattr(mod, "__all__"):
                instance = getattr(mod, base_name)
                debug(f"Found instance via __all__: {type(instance)}")
            # Finally check the smod.py file directly
            else:
                smod_module = f"{py_module}.smod"
                debug(f"Trying smod module: {smod_module}")
                try:
                    smod = importlib.import_module(smod_module)
                    if hasattr(smod, base_name):
                        instance = getattr(smod, base_name)
                        debug(f"Found instance in smod.py: {type(instance)}")
                except ImportError:
                    pass
                    
            if instance is not None:
                debug(f"Registering instance as '{base_name}'")
                debug(f"Available methods: {dir(instance)}")
                
                self.modules[base_name] = instance
                self.set_var(base_name, instance)
                debug("Module registered successfully")
            else:
                debug(f"No instance found, using module: {mod}")
                self.modules[base_name] = mod
                self.set_var(base_name, mod)
                
            return True
            
        except ImportError as e:
            raise ImportError(f"Failed to import module '{module_name}': {str(e)}")
        except Exception as e:
            raise ImportError(f"Unexpected error importing '{module_name}': {str(e)}")

    def add(self, args): 
        return self.eval_arg(args[0]) + self.eval_arg(args[1])
        
    def sub(self, args): 
        return self.eval_arg(args[0]) - self.eval_arg(args[1])
        
    def mul(self, args): 
        return self.eval_arg(args[0]) * self.eval_arg(args[1])
        
    def div(self, args): 
        return self.eval_arg(args[0]) / self.eval_arg(args[1])

    def number(self, args): 
        return float(args[0])
        
    def string(self, args):
        # Handle both single/double quoted strings and multi-line strings
        raw_str = str(args[0])
        
        # Triple-quoted strings (multi-line)
        if raw_str.startswith('"""') and raw_str.endswith('"""'):
            return raw_str[3:-3]
        elif raw_str.startswith("'''") and raw_str.endswith("'''"):
            return raw_str[3:-3]
        # Regular single/double quoted strings
        elif raw_str.startswith('"') and raw_str.endswith('"'):
            return raw_str[1:-1]
        elif raw_str.startswith("'") and raw_str.endswith("'"):
            return raw_str[1:-1]
        
        # Fallback
        return raw_str
        
    def assignment(self, args):
        name_token, value_expr = args
        value = self.eval_arg(value_expr)
        self.set_var(str(name_token), value)
        return value

    def print_stmt(self, args):
        val = self.eval_arg(args[0])
        # print() without [OUTPUT] prefix for cleaner output
        print(val)
        return val

    def func_call(self, args):
        # Extract function name and arguments
        name_node = args[0]
        passed_args = []
        if len(args) > 1 and isinstance(args[1], Tree) and args[1].data == "args":
            passed_args = [self.eval_arg(a) for a in args[1].children]

        # Handle dotted calls (module.method)
        if isinstance(name_node, Tree) and name_node.data == "dotted_name":
            name_parts = [str(t.value) if isinstance(t, Token) else str(t) for t in name_node.children]
            obj_name, method_name = name_parts[0], name_parts[-1]
            
            # Resolve the object (could be a module or a variable)
            if obj_name in self.modules:
                obj = self.modules[obj_name]
            else:
                # Try to find it in variables
                try:
                    obj = self.get_var(obj_name)
                except NameError:
                    raise NameError(f"Module or variable '{obj_name}' not found")

            # For nested paths (e.g., pkg.submodule.func), traverse the path
            current = obj
            for part in name_parts[1:-1]:  # Skip first and last parts
                if hasattr(current, part):
                    current = getattr(current, part)
                elif isinstance(current, dict) and part in current:
                    current = current[part]
                else:
                    raise AttributeError(f"Cannot access '{part}' in '{obj_name}'")
            
            # Now try to get the actual method
            if hasattr(current, method_name):
                method = getattr(current, method_name)
                if callable(method):
                    return method(*passed_args)
                else:
                    raise TypeError(f"'{method_name}' is not callable")
            elif isinstance(current, dict) and method_name in current:
                method = current[method_name]
                if callable(method):
                    return method(*passed_args)
                else:
                    raise TypeError(f"'{method_name}' is not callable")
            else:
                raise AttributeError(f"'{obj_name}' has no method '{method_name}'")

        # Handle regular function calls
        name = str(name_node)
        if name not in self.functions:
            raise NameError(f"Function '{name}' not defined")

        params, body = self.functions[name]
        if len(params) != len(passed_args):
            raise ValueError(f"Function '{name}' expects {len(params)} arguments, got {len(passed_args)}")

        # Create a new scope for function execution
        self.push_scope()
        
        # Add all parameters to the function's scope with their values
        for pname, pval in zip(params, passed_args):
            pname_str = str(pname)
            debug(f"Setting function parameter: {pname_str} = {pval}")
            self.set_var(pname_str, pval)

        try:
            # Execute the function body
            result = self._exec(body.children)
            debug(f"Function execution completed normally")
            self.pop_scope()
            return result
        except ReturnSignal as r:
            debug(f"Function returned value: {r.value}")
            self.pop_scope()
            return r.value
        except Exception as e:
            # Get function location information if available
            line_info = ""
            if hasattr(name_node, 'line') and hasattr(name_node, 'column'):
                line_info = f" at line {name_node.line}, column {name_node.column}"
            
            # Create a more informative error message
            error_msg = f"Error in function '{name}'{line_info}: {str(e)}"
            debug(error_msg)
            self.pop_scope()
            
            # Wrap the original exception with more context
            raise type(e)(error_msg) from e

def load_smod_module(module_name):
    """Load a .smod module in a platform-independent way"""
    try:
        # Convert module name to path parts
        path_parts = ['sona', 'stdlib'] + module_name.split('.')
        if path_parts[-1].endswith('.smod'):
            # Remove .smod extension and add .py
            path_parts[-1] = path_parts[-1][:-5]
        path_parts[-1] += '.py'
        
        # Create path object
        module_path = Path(*path_parts)
        
        if not module_path.is_file():
            raise ImportError(f"No backend found for module '{module_name}'")
            
        # Create module spec using absolute path
        spec = importlib.util.spec_from_file_location(
            f"sona.stdlib.{module_name}",
            str(module_path.resolve())
        )
        
        if spec is None or spec.loader is None:
            raise ImportError(f"Failed to create module spec for '{module_name}'")
            
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return module
        
    except Exception as e:
        raise ImportError(f"Failed to load module '{module_name}': {str(e)}")

def run_code(code, debug_enabled=False):
    """Execute Sona code with proper cross-platform path handling"""
    if debug_enabled:
        os.environ["SONA_DEBUG"] = "1"
        
    debug("run_code() received input:")
    debug(code[:100])
    
    # Get grammar file path in a platform-independent way
    grammar_path = Path(__file__).parent / 'grammar.lark'
    try:
        grammar = grammar_path.read_text(encoding='utf-8')
    except Exception as e:
        error(f"Failed to load grammar: {e}")
        return

    parser = Lark(grammar, parser="lalr", propagate_positions=True)
    try:
        tree = parser.parse(code)
    except UnexpectedInput as e:
        line_num = e.line
        column = e.column
        # Extract the line with the error and add ^ marker
        error_line = code.split('\n')[line_num-1] if line_num <= len(code.split('\n')) else ""
        pointer = ' ' * (column - 1) + '^'
        
        error(f"PARSER ERROR at line {line_num}, column {column}:\n{error_line}\n{pointer}\n{str(e)}")
        return
    except Exception as e:
        error(f"PARSER ERROR: {str(e)}")
        return

    debug("Starting execution...")
    interpreter = SonaInterpreter()
    try:
        if os.environ.get("SONA_DEBUG") == "1":
            print(tree.pretty())
        interpreter.transform(tree)
    except NameError as e:
        error(f"VARIABLE ERROR: {str(e)}")
    except AttributeError as e:
        error(f"MODULE ERROR: {str(e)}")
    except TypeError as e:
        error(f"TYPE ERROR: {str(e)}")
    except ImportError as e:
        error(f"IMPORT ERROR: {str(e)}")
    except ValueError as e:
        error(f"VALUE ERROR: {str(e)}")
    except Exception as e:
        error(f"INTERPRETER ERROR: {str(e)}")

if __name__ == "__main__":
    test_files = [
        "examples/test_all_modules.sona",
    ]

    for file in test_files:
        try:
            code = Path(file).read_text()
            debug(f"Running: {file}")
            run_code(code)
            if os.environ.get("SONA_DEBUG") == "1":
                print("✅ Success\n")
        except Exception as e:
            error(f"Error in {file}: {e}\n")
        finally:
            if os.environ.get("SONA_DEBUG") == "1":
                print("-" * 40)
