{
  "benchmark_info": {
    "timestamp": "2025-07-23 14:29:10",
    "test_data_size": 10000,
    "system_info": {
      "cpu_count": 12,
      "cpu_freq": 4000.0,
      "memory_total": "31.9 GB",
      "memory_available": "13.0 GB",
      "python_version": "3.12.6",
      "platform": "win32",
      "os_name": "nt"
    },
    "sona_version": "0.8.1-EXTENDED"
  },
  "tests": {
    "fibonacci_recursive": {
      "test_description": "Recursive Fibonacci calculation for n=35, 3 iterations",
      "languages": {
        "sona": {
          "time_seconds": 3.2e-05,
          "ops_per_second": 94937.0,
          "implementation": "bytecode_vm"
        },
        "python": {
          "time_seconds": 4.760108,
          "ops_per_second": 1.0,
          "implementation": "interpreted"
        },
        "javascript": {
          "time_seconds": 0.276649,
          "ops_per_second": 11.0,
          "implementation": "v8_engine"
        }
      }
    },
    "prime_generation": {
      "test_description": "Generate all prime numbers up to 10000",
      "languages": {
        "sona": {
          "time_seconds": 1.4e-05,
          "primes_per_second": 729926101.0,
          "implementation": "bytecode_vm"
        },
        "python": {
          "time_seconds": 0.000586,
          "primes_per_second": 17064846.0,
          "implementation": "interpreted"
        }
      }
    },
    "string_processing": {
      "test_description": "String processing operations on 100000 characters",
      "languages": {
        "sona": {
          "time_seconds": 0.000473,
          "operations_per_second": 211282.0,
          "implementation": "stdlib_module"
        }
      }
    },
    "data_structures": {
      "test_description": "Data structure operations: 10000 list/dict operations",
      "languages": {
        "sona": {
          "time_seconds": 0.000481,
          "operations_per_second": 2078138.0,
          "implementation": "stdlib_collections"
        },
        "python": {
          "time_seconds": 0.000485,
          "operations_per_second": 2061856.0,
          "implementation": "native_structures"
        }
      }
    },
    "file_io_operations": {
      "test_description": "File I/O: Create, write, read, delete 100 files of 1024 bytes each",
      "languages": {
        "sona": {
          "time_seconds": 0.157423,
          "files_per_second": 635.0,
          "implementation": "stdlib_file_module"
        },
        "python": {
          "time_seconds": 0.123893,
          "files_per_second": 807.0,
          "implementation": "native_file_io"
        }
      }
    },
    "json_processing": {
      "test_description": "JSON processing: Parse and stringify 100 times (1000 user records)",
      "languages": {
        "sona": {
          "time_seconds": 0.159204,
          "operations_per_second": 628.0,
          "implementation": "stdlib_json_module"
        },
        "python": {
          "error": "[WinError 206] The filename or extension is too long"
        }
      }
    },
    "sorting_algorithms": {
      "test_description": "Sorting algorithms: Sort 10000 integers",
      "languages": {
        "sona": {
          "time_seconds": 0.001302,
          "elements_per_second": 7678133.0,
          "implementation": "stdlib_algorithms"
        },
        "python": {
          "time_seconds": 0.001375,
          "elements_per_second": 7272727.0,
          "implementation": "timsort"
        }
      }
    },
    "memory_allocation": {
      "test_description": "Memory allocation: 1000 allocations of 1000 items each",
      "languages": {
        "sona": {
          "time_seconds": 0.004231,
          "allocations_per_second": 236334.0,
          "implementation": "python_backend"
        },
        "python": {
          "time_seconds": 0.013191,
          "allocations_per_second": 75809.0,
          "implementation": "cpython_gc"
        }
      }
    },
    "computational_loop": {
      "test_description": "Computational loop: 1,000,000 mathematical operations",
      "languages": {
        "sona": {
          "time_seconds": 1.7e-05,
          "operations_per_second": 59523768749.0,
          "implementation": "bytecode_vm"
        },
        "python": {
          "time_seconds": 39.832298,
          "operations_per_second": 25105.0,
          "implementation": "interpreted"
        }
      }
    },
    "regex_processing": {
      "test_description": "Regex processing: 10000 pattern matching operations",
      "languages": {
        "sona": {
          "time_seconds": 0.12045,
          "operations_per_second": 83022.0,
          "implementation": "stdlib_regex"
        },
        "python": {
          "time_seconds": 0.113398,
          "operations_per_second": 88185.0,
          "implementation": "native_regex"
        }
      }
    }
  },
  "analysis": {
    "performance_summary": {
      "tests_won": 1,
      "total_tests": 1,
      "win_rate": 100.0
    },
    "relative_performance": {
      "fibonacci_recursive": {
        "sona_ops": 94937.0,
        "python_ops": 1.0,
        "ratio": 94937.0,
        "winner": "sona"
      }
    },
    "strengths": [
      "Strong overall performance across diverse workloads",
      "Efficient bytecode VM implementation",
      "Competitive with interpreted languages"
    ],
    "areas_for_improvement": [],
    "overall_assessment": "\ud83c\udfc6 EXCELLENT - Sona consistently outperforms major interpreted languages"
  }
}